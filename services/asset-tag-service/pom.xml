<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <artifactId>asset-tag-service</artifactId>
    <packaging>jar</packaging>
    <name>Asset Tag Service</name>
    <description>Asset Tag and Provisioning Service</description>
    <parent>
		<groupId>com.intel.mtwilson.services</groupId>
		<artifactId>mtwilson-services</artifactId>
		<version>1.2-SNAPSHOT</version>
    </parent>

<!--
IMPORTANT NOTE ON BUILDING THIS PROJECT:
** most of below has been automated in this pom, project build should "just work" even the first time **
When you build it the first time, the JOOQ plugin will generate sources but they will be
incomplete because it automatically generates them from an existing database. So after
building the first time, run the junit tests in test.jdbi.RepositoryTest; they will automatically
create a local Derby database.
Then delete target/generated-sources/jooq and build the project again to generate the
complete set of jooq source classes.
Then you'll be able to run junit tests for search APIs etc that use JOOQ in their implementation.
-->

    <build>
        
        <resources>
            <resource>
                <directory>${project.build.sourceDirectory}/main/resources/html5</directory>
            </resource>
        </resources>
        
        
        <plugins>
            
           
            
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <inherited>true</inherited>
                <version>2.3.2</version>     
                <configuration>
                    <source>1.6</source>
                    <target>1.6</target>
                    <skip>false</skip>
                </configuration>
            </plugin>
            
            
            <!-- NOTE: this property definition is repeated in the ant tasks that create the database to prepare for
            generating jooq sources -->
            <!--
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-surefire-plugin</artifactId>
    <configuration>
        <systemProperties>
            <property>
                <name>derby.stream.error.file</name>
                <value>${project.build.directory}/derby/derby.log</value>
            </property>
        </systemProperties>
    </configuration>
</plugin>
-->

<plugin>
    <groupId>org.codehaus.mojo</groupId>
    <artifactId>properties-maven-plugin</artifactId>
    <version>1.0-alpha-2</version>
    <executions>
        <execution>
            <phase>initialize</phase>
            <goals>
                <goal>set-system-properties</goal>
            </goals>
            <configuration>
                <properties>
                    <property>
                        <name>derby.stream.error.file</name>
                        <value>${project.build.directory}/derby/derby.log</value>
                    </property>
                </properties>
            </configuration>
        </execution>
    </executions>
</plugin>
            
            <!-- 
the filter is required to remove signature files from component jar files, to circumvent this error:
java.lang.SecurityException: no manifiest section for signature file entry OSGI-OPT/src/org/osgi/framework/PackagePermission.java

However for a real application deployment we should KEEP the signature files... so shaded artifact is not ideal for
production deployment unless we verify component signatures during the build and sign the entire shaded artifact for
our customers.
            -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <version>1.5</version>
        <executions>
            <execution>
                <id>provisioning-service</id>
                <phase>package</phase>
                <goals><goal>shade</goal></goals>
                <configuration>
        		<shadedArtifactAttached>true</shadedArtifactAttached>
                	<shadedClassifierName>with-dependencies</shadedClassifierName>
                        <transformers>
                          <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                            <manifestEntries>
                                <Main-Class>com.intel.dcsg.cpg.console.Main</Main-Class>
                            </manifestEntries>
                          </transformer>
                        </transformers>
                        <filters>
                          <filter>
                            <artifact>*:*</artifact>
                            <excludes>
                              <exclude>META-INF/*.SF</exclude>
                              <exclude>META-INF/*.DSA</exclude>
                              <exclude>META-INF/*.RSA</exclude>
                            </excludes>
                          </filter>
                        </filters>    
                </configuration>
            </execution>
            </executions>
      </plugin>
                <!-- begin jetty plugin for junit testing -->
                <!--
<plugin>
        <groupId>org.mortbay.jetty</groupId>
        <artifactId>maven-jetty-plugin</artifactId>
        <version>6.1.10</version>
        <configuration>
                <scanIntervalSeconds>10</scanIntervalSeconds>
                <stopKey>foo</stopKey>
                <stopPort>9999</stopPort>
        </configuration>
        <executions>
                <execution>
                        <id>start-jetty</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                                <goal>run</goal>
                        </goals>
                        <configuration>
                                <scanIntervalSeconds>0</scanIntervalSeconds>
                                <daemon>true</daemon>
                        </configuration>
                </execution>
                <execution>
                        <id>stop-jetty</id>
                        <phase>post-integration-test</phase>
                        <goals>
                                <goal>stop</goal>
                        </goals>
                </execution>
        </executions>
</plugin>-->
<!-- end jetty plugin  for junit testing -->
                                                                   
        </plugins>
    </build>


    <dependencies>

<dependency>  
   <groupId>org.restlet.jse</groupId>  
   <artifactId>org.restlet</artifactId>  
   <version>2.2-M3</version>  
</dependency>
<dependency>  
   <groupId>org.restlet.jse</groupId>  
   <artifactId>org.restlet.ext.slf4j</artifactId>  
   <version>2.2-M3</version>  
</dependency>
<dependency>  
   <groupId>org.restlet.jse</groupId>  
   <artifactId>org.restlet.ext.jackson</artifactId>  
   <version>2.2-M3</version>  
</dependency>
        
    <dependency>
	<groupId>javax.servlet</groupId>
	<artifactId>servlet-api</artifactId>
	<version>2.5</version>
    </dependency>

    <dependency>
            <groupId>com.intel.dcsg.cpg</groupId>
            <artifactId>cpg-io</artifactId>
            <version>0.1.2-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>com.intel.dcsg.cpg</groupId>
            <artifactId>cpg-console</artifactId>
            <version>0.1-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>com.intel.dcsg.cpg</groupId>
            <artifactId>cpg-validation</artifactId>
            <version>0.1-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>com.intel.dcsg.cpg</groupId>
            <artifactId>cpg-crypto</artifactId>
            <version>0.1.2-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>com.intel.dcsg.cpg</groupId>
            <artifactId>cpg-tls-policy</artifactId>
            <version>0.1-SNAPSHOT</version>
        </dependency>

        <!-- mtwilson integration -->
		<!--
        <dependency>
            <groupId>com.intel.mtwilson.integration</groupId>
            <artifactId>api-client</artifactId>
            <version>1.2-SNAPSHOT</version>
        </dependency>
		-->
        <!-- end mtwilson integration -->

      <!-- bouncycastle is required to create x509 attribute certificates; sun built-in classes only support x509 public key certificates -->
        <dependency>
            <groupId>org.bouncycastle</groupId>
            <artifactId>bcprov-jdk16</artifactId>
            <version>1.46</version>
        </dependency>      
        <dependency>
            <groupId>org.bouncycastle</groupId>
            <artifactId>bcmail-jdk16</artifactId>
            <version>1.46</version>
        </dependency>      
            
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
            <type>jar</type>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>1.6.4</version>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.0.10</version>
        </dependency>        
        <dependency>
            <groupId>commons-codec</groupId>
            <artifactId>commons-codec</artifactId>
            <version>1.6</version>
            <type>jar</type>
        </dependency>
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>2.4</version>
            <type>jar</type>
        </dependency>
    <!--
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpcore</artifactId>
            <version>4.2</version>
        </dependency>
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <version>4.2</version>
        </dependency>
-->
    <!-- JSON support -->
    <!--
<dependency>
	<groupId>org.codehaus.jackson</groupId>
	<artifactId>jackson-mapper-asl</artifactId>
	<version>1.9.11</version>
</dependency>
<dependency>
	<groupId>org.codehaus.jackson</groupId>
	<artifactId>jackson-core-asl</artifactId>
	<version>1.9.11</version>
</dependency>
<dependency>
	<groupId>org.codehaus.jackson</groupId>
	<artifactId>jackson-xc</artifactId>
	<version>1.9.11</version>
</dependency>
-->
    <dependency>
    	<groupId>com.fasterxml.jackson.core</groupId>
    	<artifactId>jackson-core</artifactId>
    	<version>2.2.2</version>
    </dependency>
    <dependency>
    	<groupId>com.fasterxml.jackson.core</groupId>
    	<artifactId>jackson-annotations</artifactId>
    	<version>2.2.2</version>
    </dependency>
    <dependency>
    	<groupId>com.fasterxml.jackson.core</groupId>
    	<artifactId>jackson-databind</artifactId>
    	<version>2.2.2</version>
    </dependency>

<!-- jooq  database query assembly -->
<dependency>
  <groupId>org.jooq</groupId>
  <artifactId>jooq</artifactId>
  <version>3.1.0</version>
</dependency>
<dependency>
  <groupId>org.jooq</groupId>
  <artifactId>jooq-meta</artifactId>
  <version>3.1.0</version>
</dependency>
<dependency>
  <groupId>org.jooq</groupId>
  <artifactId>jooq-codegen</artifactId>
  <version>3.1.0</version>
</dependency>

    <!-- Jetty embedded web server -->
<dependency>
	<groupId>org.mortbay.jetty</groupId>
	<artifactId>jetty-embedded</artifactId>
	<version>6.1.26</version>
</dependency>
<!-- configuration support -->

        <dependency>
            <groupId>com.sun.jersey</groupId>
            <artifactId>jersey-core</artifactId>
            <version>1.17.1</version>
        </dependency>
        <dependency>
            <groupId>com.sun.jersey</groupId>
            <artifactId>jersey-server</artifactId>
            <version>1.17.1</version>
        </dependency>
        <dependency>
            <groupId>com.sun.jersey</groupId>
            <artifactId>jersey-bundle</artifactId>
            <version>1.17.1</version>
        </dependency>
        <dependency>
            <groupId>com.sun.jersey</groupId>
            <artifactId>jersey-grizzly</artifactId>
            <version>1.17.1</version>
        </dependency><!--
        <dependency>
            <groupId>com.sun.jersey</groupId>
            <artifactId>jersey-grizzly2-servlet</artifactId>
            <version>1.17.1</version>
        </dependency>-->
        <dependency>
                    <artifactId>jaxb-impl</artifactId>
                    <groupId>com.sun.xml.bind</groupId>
                    <version>2.2.7-b63</version>
        </dependency>
        
		<dependency>
			<groupId>javax.ws.rs</groupId>
			<artifactId>jsr311-api</artifactId>
			<version>1.1</version>
		</dependency>
        
        
<!-- grizzly embedded webserver -->
        <dependency>
            <groupId>com.sun.grizzly</groupId>
            <artifactId>grizzly-servlet-webserver</artifactId>
            <version>1.9.56</version>
        </dependency>
<!-- end grizzly -->        

    <!-- apache 2.0 license http://www.jdbi.org/getting_jdbi/  java database programming interface -->
    <dependency>
      <groupId>org.jdbi</groupId>
      <artifactId>jdbi</artifactId>
      <version>2.49</version>
    </dependency>        
        
        
        <!-- apache 2.0 license,  database connection pooling system -->
    <dependency>
        <groupId>commons-dbcp</groupId>
        <artifactId>commons-dbcp</artifactId>
        <version>1.4</version>
    </dependency>
        
        <!-- apache 2.0 license ,  java database system -->
<dependency>
	<groupId>org.apache.derby</groupId>
	<artifactId>derby</artifactId>
	<version>10.10.1.1</version>
</dependency>
                    
        <!--
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-core</artifactId>
      <version>3.2.0.RELEASE</version>
      <type>jar</type>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-beans</artifactId>
      <version>3.2.0.RELEASE</version>
      <type>jar</type>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-context</artifactId>
      <version>3.2.0.RELEASE</version>
      <type>jar</type>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-context-support</artifactId>
      <version>3.2.0.RELEASE</version>
      <type>jar</type>
    </dependency>
-->
    </dependencies>  
    
    
    <!-- using profiles because we don't want jooq source generation on every build... only need it when we change
    the database schema -->
  <profiles>
      <profile>
          <activation>
              <file>
                  <missing>target/generated-sources/jooq</missing>
              </file>
          </activation>
  <build>
      
      <plugins>

          <!-- before we can generate the jooq classes we need to make sure we have a local database for the jooq generator
          to use as input -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <executions>
                    <execution>
                        <id>default-cli</id>
        <phase>generate-sources</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <target>
                                <property name="compile_classpath" refid="maven.compile.classpath"/>
                                <property name="test_classpath" refid="maven.test.classpath"/>
                                <property name="runtime_classpath" refid="maven.runtime.classpath"/>
    <!-- 
    compile the project but exclude the resource classes that depend on jooq generated sources 
    (which do not exist yet since we are in the jooq generation profile) 
    so we must also excldue any java sources that refer directly or indirectly to the jooq generated sources
    in order to get this to compile.
    -->
    <mkdir dir="${project.build.outputDirectory}"/>
   <javac 
       srcdir="${basedir}/src/main/java"
       excludes="com/intel/mtwilson/atag/RestletApplication.java com/intel/mtwilson/atag/cmd/** com/intel/mtwilson/atag/resource/**"
       destdir="${project.build.outputDirectory}"
         classpath="${compile_classpath}"
         debug="on"
   includeantruntime="false"/>
    <mkdir dir="${project.build.testOutputDirectory}"/>
   <javac srcdir="${basedir}/src/test/java"
            excludes="test/restlet/** test/jooq/**"
          destdir="${project.build.testOutputDirectory}"
         classpath="${test_classpath}"
         debug="on"
   includeantruntime="false"/>
  <!-- run the program to create a local derby database -->                             
  <java classname="test.jdbi.RepositoryTest" classpath="${test_classpath}">
        <sysproperty key="derby.stream.error.file" value="${project.build.directory}/derby/derby.log"/>
       </java>
                            </target>
                        </configuration>
                    </execution>
                </executions>
                <dependencies>
                    <dependency>
                        <groupId>org.apache.ant</groupId>
                        <artifactId>ant</artifactId>
                        <version>1.8.4</version>
                    </dependency>
                    <dependency>
                        <groupId>ant-contrib</groupId>
                        <artifactId>ant-contrib</artifactId>
                        <version>1.0b3</version>
                    </dependency>
                    <!-- required for javac to work -->
                <dependency>
                  <groupId>com.sun</groupId>
                  <artifactId>tools</artifactId>
                  <version>1.6</version> <!-- Mt Wilson builds target Java 1.6, therefore you must use JDK 1.6 to compile this. Make sure you set JDK 1.6 as the specific JDK for this maven project in your IDE in order for this to work.  -->
                  <scope>system</scope>
                  <systemPath>${java.home}/../lib/tools.jar</systemPath>
                </dependency>
                </dependencies>
            </plugin>	    
          
      
      <!-- reference: 
      http://www.jooq.org/doc/3.1/manual/getting-started/tutorials/jooq-in-7-steps/jooq-in-7-steps-step3/
      http://www.jooq.org/doc/2.4/manual/META/Configuration/
      http://mojo.codehaus.org/exec-maven-plugin/java-mojo.htmhttp://mojo.codehaus.org/exec-maven-plugin/java-mojo.html 
      -->
<plugin>

  <!-- Specify the maven code generator plugin -->
  <groupId>org.jooq</groupId>
  <artifactId>jooq-codegen-maven</artifactId>
  <version>3.1.0</version>

  <!-- The plugin should hook into the generate goal -->
  <executions>
    <execution>
        <phase>generate-sources</phase>
      <goals>
        <goal>generate</goal>
      </goals>
    </execution>
  </executions>

  <!-- Manage the plugin's dependency. In this example, we'll use a Postgres database -->
  <dependencies>
      <!--
    <dependency>
      <groupId>postgresql</groupId>
      <artifactId>postgresql</artifactId>
      <version>8.4-702.jdbc4</version>
    </dependency>
    -->
<dependency>
	<groupId>org.apache.derby</groupId>
	<artifactId>derby</artifactId>
	<version>10.10.1.1</version>
</dependency>
    
  </dependencies>

  <!-- Specify the plugin configuration -->
  <configuration>

    <!-- JDBC connection parameters -->
    <jdbc>
      <driver>org.apache.derby.jdbc.EmbeddedDriver</driver>
      <url>jdbc:derby:directory:target/derby/mytestdb;create=true</url>
      <user></user>
      <password></password>
    </jdbc>

    <!-- Generator parameters -->
    <generator>
      <name>org.jooq.util.DefaultGenerator</name>
      <database>
        <name>org.jooq.util.derby.DerbyDatabase</name>
        <includes>.*</includes>
        <excludes></excludes>
        <inputSchema>APP</inputSchema>
      </database>
      <generate>
        <relations>true</relations>
        <deprecated>false</deprecated>
      </generate>
      <target>
        <packageName>com.intel.mtwilson.atag.dao.jooq.generated</packageName>
        <directory>${project.build.directory}/generated-sources/jooq</directory>
      </target>
    </generator>
  </configuration>
</plugin>      
                      
      </plugins>
      
  </build>
      </profile>
  </profiles>    
</project>