<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <artifactId>asset-tag-service</artifactId>
    <packaging>jar</packaging>
    <name>Asset Tag Service</name>
    <description>Asset Tag and Provisioning Service</description>
    <parent>
		<groupId>com.intel.mtwilson.services</groupId>
		<artifactId>mtwilson-services</artifactId>
		<version>1.2.3-SNAPSHOT</version>
    </parent>

<!--

To generate javadocs:  mvn -DskipTests=true -Drelease site:site
They will be created in target/site/apidocs

IMPORTANT NOTE ON BUILDING THIS PROJECT:
The asset-tag-model and asset-tag-dao projects must be built first. 
If the database schema has changed, be sure to do a clean build on asset-tag-dao and then a 
clean build on this project. Then run "CreateDatabase", "InitDatabase", and "CreateCaKey" before
you run "StartHttpServer" if you do any local testing.
** most of below has been automated in this pom, project build should "just work" even the first time **
When you build it the first time, the JOOQ plugin will generate sources but they will be
incomplete because it automatically generates them from an existing database. So after
building the first time, run the junit tests in test.jdbi.RepositoryTest; they will automatically
create a local Derby database.
Then delete target/generated-sources/jooq and build the project again to generate the
complete set of jooq source classes.
Then you'll be able to run junit tests for search APIs etc that use JOOQ in their implementation.
-->

    <build>
        <!--
        <resources>
            <resource>
                <directory>${basedir}/src/main/resources/html5</directory>
            </resource>
        </resources>
        -->
        
        <plugins>
            
           
            
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <inherited>true</inherited>
                <version>2.3.2</version>     
                <configuration>
                    <source>1.6</source>
                    <target>1.6</target>
                    <skip>false</skip>
                </configuration>
            </plugin>
            
            
            <!-- NOTE: this property definition is repeated in the ant tasks that create the database to prepare for
            generating jooq sources -->
            <!--
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-surefire-plugin</artifactId>
    <configuration>
        <systemProperties>
            <property>
                <name>derby.stream.error.file</name>
                <value>${project.build.directory}/derby/derby.log</value>
            </property>
        </systemProperties>
    </configuration>
</plugin>
-->

<plugin>
    <groupId>org.codehaus.mojo</groupId>
    <artifactId>properties-maven-plugin</artifactId>
    <version>1.0-alpha-2</version>
    <executions>
        <execution>
            <phase>initialize</phase>
            <goals>
                <goal>set-system-properties</goal>
            </goals>
            <configuration>
                <properties>
                    <property>
                        <name>derby.stream.error.file</name>
                        <value>${project.build.directory}/derby/derby.log</value>
                    </property>
                </properties>
            </configuration>
        </execution>
    </executions>
</plugin>
            
            <!-- 
the filter is required to remove signature files from component jar files, to circumvent this error:
java.lang.SecurityException: no manifiest section for signature file entry OSGI-OPT/src/org/osgi/framework/PackagePermission.java

However for a real application deployment we should KEEP the signature files... so shaded artifact is not ideal for
production deployment unless we verify component signatures during the build and sign the entire shaded artifact for
our customers.
            -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <version>1.5</version>
        <executions>
            <execution>
                <id>provisioning-service</id>
                <phase>package</phase>
                <goals><goal>shade</goal></goals>
                <configuration>
        		<shadedArtifactAttached>true</shadedArtifactAttached>
                	<shadedClassifierName>with-dependencies</shadedClassifierName>
                        <transformers>
                          <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                            <manifestEntries>
                                <Main-Class>com.intel.dcsg.cpg.console.Main</Main-Class>
                            </manifestEntries>
                          </transformer>
                        </transformers>
                        <filters>
                          <filter>
                            <artifact>*:*</artifact>
                            <excludes>
                              <exclude>META-INF/*.SF</exclude>
                              <exclude>META-INF/*.DSA</exclude>
                              <exclude>META-INF/*.RSA</exclude>
                            </excludes>
                          </filter>
                        </filters>    
                </configuration>
            </execution>
            </executions>
      </plugin>
                <!-- begin jetty plugin for junit testing -->
                <!--
<plugin>
        <groupId>org.mortbay.jetty</groupId>
        <artifactId>maven-jetty-plugin</artifactId>
        <version>6.1.10</version>
        <configuration>
                <scanIntervalSeconds>10</scanIntervalSeconds>
                <stopKey>foo</stopKey>
                <stopPort>9999</stopPort>
        </configuration>
        <executions>
                <execution>
                        <id>start-jetty</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                                <goal>run</goal>
                        </goals>
                        <configuration>
                                <scanIntervalSeconds>0</scanIntervalSeconds>
                                <daemon>true</daemon>
                        </configuration>
                </execution>
                <execution>
                        <id>stop-jetty</id>
                        <phase>post-integration-test</phase>
                        <goals>
                                <goal>stop</goal>
                        </goals>
                </execution>
        </executions>
</plugin>-->
<!-- end jetty plugin  for junit testing -->
            <plugin>
                <groupId>org.jvnet.jaxb2.maven2</groupId>
                <artifactId>maven-jaxb2-plugin</artifactId>
                <version>0.8.3</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                        <configuration>
                            <schemaIncludes>
                                <include>jaxb/intel-mtwilson-asset-tag-attribute-selections/*.xsd</include>
                            </schemaIncludes>
                            <episodeFile>${project.build.directory}/generated-sources/xjc/META-INF/jaxb-intel-mtwilson-asset-tag-attribute-selections.episode</episodeFile>
                            <generatePackage>com.intel.mtwilson.atag.xml.attrselect</generatePackage>
                        </configuration>
                        <id>jaxb-generate-intel-mtwilson-asset-tag-attribute-selections</id>
                    </execution>
                </executions>
                <configuration>
                    <catalog>src/main/resources/jaxb/catalog.xml</catalog>
                    <catalogResolver>org.jvnet.jaxb2.maven2.resolver.tools.ClasspathCatalogResolver</catalogResolver>
                    <forceRegenerate>true</forceRegenerate>
                    <generateDirectory>${project.build.directory}/generated-sources/xjc</generateDirectory>
                    <verbose>true</verbose>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <activation>
                <property>
                    <name>release</name>
                </property>
            </activation>
            <build>
                <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-source-plugin</artifactId>
        <executions>
          <execution>
            <id>attach-sources</id>
            <phase>package</phase>
            <goals>
              <goal>jar</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
		<plugin>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-javadoc-plugin</artifactId>
			<version>2.9</version>
			<configuration>
				<stylesheetfile>src/main/javadoc/stylesheet.css</stylesheetfile>
			</configuration>
			<executions>
            <execution>
                <id>attach-javadocs</id>
                <phase>site</phase>
                <goals>
                    <goal>aggregate</goal>
                </goals>
            </execution>
        </executions>			
		</plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

    <dependencies>

        <dependency>
		<groupId>com.intel.mtwilson.integration</groupId>
		<artifactId>mtwilson-my</artifactId>
		<version>${project.version}</version>            
        </dependency>
        <!-- webservice-util is required when using "my" because of the reference to ASDataCipher; but it must be a separate package to avoid circular dependencies between attestation service, asdata, and "my" -->
        <dependency>
        <groupId>com.intel.mtwilson.services</groupId>
        <artifactId>mtwilson-webservice-util</artifactId>
        <version>${project.version}</version>
        </dependency>
	<dependency>
	    <groupId>com.intel.mtwilson.services</groupId>
	    <artifactId>mtwilson-hostagent-ext</artifactId>
	    <version>${project.version}</version>
  	</dependency>
        
<dependency>  
   <groupId>org.restlet.jse</groupId>  
   <artifactId>org.restlet</artifactId>  
   <version>2.2-M4</version>  
</dependency>
<dependency>  
   <groupId>org.restlet.jse</groupId>  
   <artifactId>org.restlet.ext.slf4j</artifactId>  
   <version>2.2-M4</version>  
</dependency>
<dependency>  
   <groupId>org.restlet.jse</groupId>  
   <artifactId>org.restlet.ext.jackson</artifactId>  
   <version>2.2-M4</version>  
</dependency>
<dependency>  
   <groupId>org.restlet.jse</groupId>  
   <artifactId>org.restlet.ext.jetty</artifactId>  
   <version>2.2-M4</version>
</dependency>
<!--
 <dependency>  
   <groupId>org.restlet.jse</groupId>  
   <artifactId>org.restlet.ext.simple</artifactId>  
   <version>2.2-M4</version>
 </dependency>
 -->
   <dependency>  
   <groupId>org.restlet.jse</groupId>  
   <artifactId>org.restlet.ext.ssl</artifactId>  
   <version>2.2-M4</version>
 </dependency>
    <dependency>
	<groupId>javax.servlet</groupId>
	<artifactId>servlet-api</artifactId>
	<version>2.5</version>
    </dependency>

    <dependency>
            <groupId>com.intel.mtwilson.services</groupId>
            <artifactId>asset-tag-model</artifactId>
            <version>${project.version}</version>
        </dependency>
    <dependency>
            <groupId>com.intel.mtwilson.services</groupId>
            <artifactId>asset-tag-dao</artifactId>
            <version>${project.version}</version>
        </dependency>
    <dependency>
            <groupId>com.intel.mtwilson.services</groupId>
            <artifactId>asset-tag-dao-jooq</artifactId>
            <version>${project.version}</version>
        </dependency>

    <dependency>
            <groupId>com.intel.mtwilson.services</groupId>
            <artifactId>mtwilson-tls-policy</artifactId>
            <version>${project.version}</version>
        </dependency>

<!-- mt wilson api client is used to send new x509 attribute certificates to mt wilson as they are created -->
    <dependency>
            <groupId>com.intel.mtwilson.integration</groupId>
            <artifactId>mtwilson-api</artifactId>
            <version>${project.version}</version>
        </dependency>
    <dependency>
            <groupId>com.intel.mtwilson.integration</groupId>
            <artifactId>mtwilson-client-java6</artifactId>
            <version>${project.version}</version>
        </dependency>


    <dependency>
            <groupId>com.intel.dcsg.cpg</groupId>
            <artifactId>cpg-io</artifactId>
        </dependency>
        <dependency>
            <groupId>com.intel.dcsg.cpg</groupId>
            <artifactId>cpg-console</artifactId>
        </dependency>
        <dependency>
            <groupId>com.intel.dcsg.cpg</groupId>
            <artifactId>cpg-validation</artifactId>
        </dependency>
        <dependency>
            <groupId>com.intel.dcsg.cpg</groupId>
            <artifactId>cpg-crypto</artifactId>
        </dependency>
        <dependency>
            <groupId>com.intel.dcsg.cpg</groupId>
            <artifactId>cpg-tls-policy</artifactId>
        </dependency>
        <dependency>
            <groupId>com.intel.dcsg.cpg</groupId>
            <artifactId>cpg-util</artifactId>
        </dependency>
        <dependency>
            <groupId>com.intel.dcsg.cpg</groupId>
            <artifactId>cpg-performance</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- mtwilson integration -->
		<!--
        <dependency>
            <groupId>com.intel.mtwilson.integration</groupId>
            <artifactId>mtwilson-client-java6</artifactId>
            <version>1.2-SNAPSHOT</version>
        </dependency>
		-->
        <!-- end mtwilson integration -->

      <!-- bouncycastle is required to create x509 attribute certificates; sun built-in classes only support x509 public key certificates -->
        <dependency>
            <groupId>org.bouncycastle</groupId>
            <artifactId>bcprov-jdk16</artifactId>
            <version>1.46</version>
        </dependency>      
        <dependency>
            <groupId>org.bouncycastle</groupId>
            <artifactId>bcmail-jdk16</artifactId>
            <version>1.46</version>
        </dependency>      
            
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
            <type>jar</type>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
        </dependency>        
        <dependency>
            <groupId>commons-codec</groupId>
            <artifactId>commons-codec</artifactId>
        </dependency>
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
        </dependency>
        <!-- deps to support ssl -->
        <dependency>
            <groupId>simple-framework</groupId>
            <artifactId>simple-framework</artifactId>
            <version>5.1</version>
        </dependency>
    <!--
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpcore</artifactId>
            <version>4.2</version>
        </dependency>
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <version>4.2</version>
        </dependency>
-->
    <!-- JSON support -->
    <!--
<dependency>
	<groupId>org.codehaus.jackson</groupId>
	<artifactId>jackson-mapper-asl</artifactId>
	<version>1.9.11</version>
</dependency>
<dependency>
	<groupId>org.codehaus.jackson</groupId>
	<artifactId>jackson-core-asl</artifactId>
	<version>1.9.11</version>
</dependency>
<dependency>
	<groupId>org.codehaus.jackson</groupId>
	<artifactId>jackson-xc</artifactId>
	<version>1.9.11</version>
</dependency>
-->
    <dependency>
    	<groupId>com.fasterxml.jackson.core</groupId>
    	<artifactId>jackson-core</artifactId>
    </dependency>
    <dependency>
    	<groupId>com.fasterxml.jackson.core</groupId>
    	<artifactId>jackson-annotations</artifactId>
    </dependency>
    <dependency>
    	<groupId>com.fasterxml.jackson.core</groupId>
    	<artifactId>jackson-databind</artifactId>
    </dependency>

<!-- jooq  database query assembly -->
<dependency>
  <groupId>org.jooq</groupId>
  <artifactId>jooq</artifactId>
  <version>3.1.0</version>
</dependency>
<dependency>
  <groupId>org.jooq</groupId>
  <artifactId>jooq-meta</artifactId>
  <version>3.1.0</version>
</dependency>
<dependency>
  <groupId>org.jooq</groupId>
  <artifactId>jooq-codegen</artifactId>
  <version>3.1.0</version>
</dependency>

    <!-- Jetty embedded web server -->
<dependency>
	<groupId>org.mortbay.jetty</groupId>
	<artifactId>jetty-embedded</artifactId>
	<version>6.1.26</version>
</dependency>
<!-- configuration support -->
        <!--
        <dependency>
            <groupId>com.sun.jersey</groupId>
            <artifactId>jersey-core</artifactId>
            <version>1.17.1</version>
        </dependency>
        <dependency>
            <groupId>com.sun.jersey</groupId>
            <artifactId>jersey-server</artifactId>
            <version>1.17.1</version>
        </dependency>
        <dependency>
            <groupId>com.sun.jersey</groupId>
            <artifactId>jersey-bundle</artifactId>
            <version>1.17.1</version>
        </dependency>
        <dependency>
            <groupId>com.sun.jersey</groupId>
            <artifactId>jersey-grizzly</artifactId>
            <version>1.17.1</version>
        </dependency>
        <dependency>
            <groupId>com.sun.jersey</groupId>
            <artifactId>jersey-grizzly2-servlet</artifactId>
            <version>1.17.1</version>
        </dependency>
        -->
        <dependency>
            <groupId>org.glassfish.jersey.core</groupId>
            <artifactId>jersey-client</artifactId>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.core</groupId>
            <artifactId>jersey-common</artifactId>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.core</groupId>
            <artifactId>jersey-server</artifactId>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.containers</groupId>
            <artifactId>jersey-container-servlet</artifactId>
        </dependency>        
        <dependency>
            <groupId>org.glassfish.jersey.media</groupId>
            <artifactId>jersey-media-multipart</artifactId>
        </dependency>
        
        <dependency>
                    <artifactId>jaxb-impl</artifactId>
                    <groupId>com.sun.xml.bind</groupId>
                    <version>2.2.7-b63</version>
        </dependency>
        
		<dependency>
			<groupId>javax.ws.rs</groupId>
			<artifactId>jsr311-api</artifactId>
			<version>1.1</version>
		</dependency>
        
        
<!-- grizzly embedded webserver -->
        <dependency>
            <groupId>com.sun.grizzly</groupId>
            <artifactId>grizzly-servlet-webserver</artifactId>
            <version>1.9.56</version>
        </dependency>
<!-- end grizzly -->        

    <!-- apache 2.0 license http://www.jdbi.org/getting_jdbi/  java database programming interface -->
    <dependency>
      <groupId>org.jdbi</groupId>
      <artifactId>jdbi</artifactId>
      <version>2.49</version>
    </dependency>        
        
        
        <!-- apache 2.0 license,  database connection pooling system -->
    <dependency>
        <groupId>commons-dbcp</groupId>
        <artifactId>commons-dbcp</artifactId>
        <version>1.4</version>
    </dependency>
        
        <!-- apache 2.0 license ,  java database system -->
<dependency>
	<groupId>org.apache.derby</groupId>
	<artifactId>derby</artifactId>
	<version>10.10.1.1</version>
</dependency>

                    <!-- gplv2 license mysql database connector for testing only (cannot include in production build) -->
        <dependency>
    	<groupId>mysql</groupId>
    	<artifactId>mysql-connector-java</artifactId>
        <scope>test</scope>
    </dependency>
    

    <dependency>
        <groupId>com.intel.mtwilson.services</groupId>
        <artifactId>mtwilson-trust-utils</artifactId>
        <version>${project.version}</version>
    </dependency>
                    
        <!--
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-core</artifactId>
      <version>3.2.0.RELEASE</version>
      <type>jar</type>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-beans</artifactId>
      <version>3.2.0.RELEASE</version>
      <type>jar</type>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-context</artifactId>
      <version>3.2.0.RELEASE</version>
      <type>jar</type>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-context-support</artifactId>
      <version>3.2.0.RELEASE</version>
      <type>jar</type>
    </dependency>
-->
    </dependencies>  
    
    
</project>