/*
 * Copyright (C) 2014 Intel Corporation
 * All rights reserved.
 */
package com.intel.mtwilson.setup.tasks;

import com.intel.dcsg.cpg.crypto.RandomUtil;
import com.intel.dcsg.cpg.io.UUID;
import com.intel.mtwilson.My;
import com.intel.mtwilson.setup.DatabaseSetupTask;
import com.intel.mtwilson.shiro.authc.password.PasswordCredentialsMatcher;
import com.intel.mtwilson.shiro.jdbi.LoginDAO;
import com.intel.mtwilson.shiro.jdbi.MyJdbi;
import com.intel.mtwilson.shiro.jdbi.model.Role;
import com.intel.mtwilson.shiro.jdbi.model.Status;
import com.intel.mtwilson.shiro.jdbi.model.User;
import com.intel.mtwilson.shiro.jdbi.model.UserLoginPassword;
import java.nio.charset.Charset;
import java.sql.Connection;

/**
 * TODO:  this class has been replaced by CreateAdminUser in mtwilson-shiro-setup
 * 
 * @deprecated
 * @author jbuhacoff
 */
public class CreateAdministrator extends DatabaseSetupTask {
    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(CreateAdministrator.class);

    private String adminUsername;
    private String adminPassword;

    public String getAdminUsername() {
        return adminUsername;
    }

    public void setAdminUsername(String adminUsername) {
        this.adminUsername = adminUsername;
    }

    public String getAdminPassword() {
        return adminPassword;
    }

    
    public void setAdminPassword(String adminPassword) {
        this.adminPassword = adminPassword;
    }
    
    
    
    @Override
    protected void configure() throws Exception {
        if( adminUsername == null ) {
            adminUsername = "admin";
            log.info("Creating administrator user with default username 'admin'");
        }
        if( adminPassword == null ) {
            adminPassword = RandomUtil.randomBase64String(8).replace("/", "!").replace("=", "-"); // TODO:  use more special characters ; use a string generation function instead of a base64 function
            log.info("Generated random password for administrator user"); // but do not print it to the log, that's permanent -- the setup application needs to grab it from the getAdminPassword() and display to the user
        }
        // check for the required database tables to be present
        try (Connection c = My.jdbc().connection()) {
            requireTable(c, "mw_role");
            requireTable(c, "mw_role_permission");
            requireTable(c, "mw_user");
            requireTable(c, "mw_user_login_password");
            requireTable(c, "mw_user_login_password_role");
        }
    }

    @Override
    protected void validate() throws Exception {
        try(LoginDAO loginDAO = MyJdbi.authz()) {
            User admin = loginDAO.findUserByName(adminUsername);
            if( admin == null ) {
                validation("Administrator user does not exist");
            }
        }
    }

    @Override
    protected void execute() throws Exception {
        try(LoginDAO loginDAO = MyJdbi.authz()) {
            // create the admin role if it does not already exist
            Role role = loginDAO.findRoleByName("admin");
            if( role == null ) {
                role = new Role();
                role.setId(new UUID());
                role.setRoleName("admin");
                role.setDescription("Automatically generated by setup");
                loginDAO.insertRole(role.getId(), role.getRoleName(), role.getDescription());
                // create the admin role permissions
                loginDAO.insertRolePermission(role.getId(), "*", "*", "*");
            }
            
            // create the user 
            User user = new User(); 
            user.setId(new UUID());
            user.setComment("Automatically generated by setup");
            user.setEnabled(true);
            user.setStatus(Status.APPROVED);
            user.setUsername(adminUsername);
            loginDAO.insertUser(user.getId(), user.getUsername(), user.getLocale(), user.isEnabled(), user.getStatus() , user.getComment());
            // create the password
            UserLoginPassword userLoginPassword = new UserLoginPassword();
            userLoginPassword.setId(new UUID());
            userLoginPassword.setUserId(user.getId());
            userLoginPassword.setAlgorithm("SHA-256");
            userLoginPassword.setEnabled(true);
            userLoginPassword.setExpires(null);
            userLoginPassword.setIterations(1024*1024);
            userLoginPassword.setSalt(RandomUtil.randomByteArray(8));
            byte[] passwordHash = PasswordCredentialsMatcher.passwordHash(adminPassword.getBytes(Charset.forName("UTF-8")), userLoginPassword);
            userLoginPassword.setPasswordHash(passwordHash);
            loginDAO.insertUserLoginPassword(userLoginPassword.getId(), userLoginPassword.getUserId(), passwordHash, userLoginPassword.getSalt(), userLoginPassword.getIterations(), userLoginPassword.getAlgorithm(), userLoginPassword.getExpires(), userLoginPassword.isEnabled());
            // assign the admin role to the admin user
            loginDAO.insertUserLoginPasswordRole(userLoginPassword.getId(), role.getId());
            
        }
    }
    
}
