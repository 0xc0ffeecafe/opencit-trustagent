#!/bin/sh

# REQUIRES:  _core for using_glassfish / using_tomcat functions
# OPTIONAL:  glassfish or tomcat plugin 


### FUNCTION LIBRARY: web service on top of glassfish

# parameters: glassfish_application_name such as "AttestationService"
webservice_running() {
  local glassfish_application_name="$1"
  glassfish_running
  WEBSERVICE_RUNNING=""
  if glassfish_running; then
    # TODO ??? check for the specific ATTESTATION_SERVICE_ID name defined in ${intel_conf_dir}/${package_env_filename}
    WEBSERVICE_DEPLOYED=`$glassfish list-applications | grep "${glassfish_application_name}" | head -n 1 | awk '{ print $1 }'`
    if [ -n "$WEBSERVICE_DEPLOYED" ]; then
      WEBSERVICE_RUNNING=`$glassfish show-component-status $WEBSERVICE_DEPLOYED | grep enabled`
    fi
  fi
}
webservice_running_report() {
  local glassfish_application_name="$1"
  echo -n "Checking ${glassfish_application_name}... "
  webservice_running "${glassfish_application_name}"
  if [ -n "$WEBSERVICE_RUNNING" ]; then
    echo "Running"
  else
    echo "Not running"
  fi
}


webservice_start() {
  local glassfish_application_name="$1"
  webservice_running  "${glassfish_application_name}"
  if [ -n "$WEBSERVICE_DEPLOYED" ]; then
    $glassfish enable $WEBSERVICE_DEPLOYED
  fi
}
webservice_stop() {
  local glassfish_application_name="$1"
  webservice_running "${glassfish_application_name}"
  if [ -n "$WEBSERVICE_DEPLOYED" ]; then
    $glassfish disable $WEBSERVICE_DEPLOYED
  fi
}

webservice_start_report() {
    local glassfish_application_name="$1"
    if using_glassfish; then
      glassfish_require
      glassfish_running
      if [ -z "$GLASSFISH_RUNNING" ]; then
          glassfish_start_report
      fi
    fi
    webservice_running "${glassfish_application_name}"
    if [ -z "$WEBSERVICE_RUNNING" ]; then
          action_condition WEBSERVICE_RUNNING "Starting ${glassfish_application_name}" "webservice_start ${glassfish_application_name} > /dev/null; webservice_running ${glassfish_application_name};"
    fi
    if [ -n "$WEBSERVICE_RUNNING" ]; then
          echo_success "${glassfish_application_name} is running"
    fi
}
webservice_stop_report() {
    local glassfish_application_name="$1"
    if using_glassfish; then
      glassfish_require
      glassfish_running
    fi
    webservice_running "${glassfish_application_name}"
    # XXX TODO need a function like webcontainer_running to handle all supported containers instead of this glassfish-specific check for GLASSFISH_RUNNING
    if [ -n "$GLASSFISH_RUNNING" ]; then
      if [ -n "$WEBSERVICE_RUNNING" ]; then
        inaction_condition WEBSERVICE_RUNNING "Stopping ${glassfish_application_name}" "webservice_stop ${glassfish_application_name} > /dev/null; webservice_running ${glassfish_application_name};"
      fi
    fi
    if [ -z "$WEBSERVICE_RUNNING" ]; then
      echo_success "${glassfish_application_name} is stopped"
    fi
}


# parameters:
# glassfish_application_name such as "AttestationService"
# webservice_war_file such as "/path/to/AttestationService-0.5.1.war"
# Environment:
# - glassfish_required_version
webservice_install() {
  local glassfish_application_name="$1"
  local webservice_war_file="$2"
  if using_glassfish; then
    glassfish_require
  fi
  #glassfish_create_domain "intel-as" "${ATTESTATION_SERVICE_HOME}/glassfish/domain"
  webservice_running "${glassfish_application_name}"
#  local WAR_NAME=${ATTESTATION_SERVICE_ID}
#  local WAR_FILE=${ATTESTATION_SERVICE_ID}.war
  local WAR_FILE="${webservice_war_file}"
    if [ -n "$WEBSERVICE_DEPLOYED" ]; then
      if using_glassfish; then
        echo "Re-deploying ${WEBSERVICE_DEPLOYED} to Glassfish..."
        ${glassfish} redeploy --name ${WEBSERVICE_DEPLOYED} ${WAR_FILE}
      fi
    else
      if using_glassfish; then
        echo "Deploying ${glassfish_application_name} to Glassfish..."
        ${glassfish} deploy --name ${glassfish_application_name} ${WAR_FILE}
      fi
    fi
}

webservice_uninstall() {
  local glassfish_application_name="$1"
  webservice_running "${glassfish_application_name}"
#  local WAR_NAME=${ATTESTATION_SERVICE_ID}
  local WAR_NAME="${glassfish_application_name}"
  if [ -n "$WEBSERVICE_DEPLOYED" ]; then
    if using_glassfish; then
      echo "Undeploying ${WEBSERVICE_DEPLOYED} from Glassfish..."
      ${glassfish} undeploy ${WEBSERVICE_DEPLOYED}
    fi
  else
    if using_glassfish; then
      echo "Application is not deployed on Glassfish; skipping undeploy"
    fi
  fi
}
