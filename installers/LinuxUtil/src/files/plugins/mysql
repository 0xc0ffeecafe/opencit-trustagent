#!/bin/sh


# REQUIRES: file, version
# OPTIONAL: color

DEFAULT_MYSQL_HOSTNAME="127.0.0.1"
DEFAULT_MYSQL_PORTNUM="3306"
DEFAULT_MYSQL_USERNAME="root"
DEFAULT_MYSQL_PASSWORD=""
DEFAULT_MYSQL_DATABASE="mw_as"

DEFAULT_MYSQL_REQUIRED_VERSION="5.0"

# DEPRECATED
mysql_required_version=5.0

### FUNCTION LIBRARY: MYSQL FUNCTIONS


# parameters:
# 1. path to properties file
# 2. properties prefix (for mountwilson.as.db.user etc. the prefix is mountwilson.as.db)
# the default prefix is "mysql" for properties like "mysql.user", etc. The
# prefix must not have any spaces or special shell characters
mysql_read_connection_properties() {
    local config_file="$1"
    local prefix="${2:-mysql}"
    MYSQL_HOSTNAME=`read_property_from_file ${prefix}.host "${config_file}"`
    MYSQL_PORTNUM=`read_property_from_file ${prefix}.port "${config_file}"`
    MYSQL_USERNAME=`read_property_from_file ${prefix}.user "${config_file}"`
    MYSQL_PASSWORD=`read_property_from_file ${prefix}.password "${config_file}"`
    MYSQL_DATABASE=`read_property_from_file ${prefix}.schema "${config_file}"`
    MYSQL_JDBC_DRIVER=`read_property_from_file ${prefix}.driver "${config_file}"`
}
mysql_write_connection_properties() {
    local config_file="$1"
    local prefix="${2:-mysql}"
    update_property_in_file ${prefix}.host "${config_file}" "${MYSQL_HOSTNAME}"
    update_property_in_file ${prefix}.port "${config_file}" "${MYSQL_PORTNUM}"
    update_property_in_file ${prefix}.user "${config_file}" "${MYSQL_USERNAME}"
    update_property_in_file ${prefix}.password "${config_file}" "${MYSQL_PASSWORD}"
    update_property_in_file ${prefix}.schema "${config_file}" "${MYSQL_DATABASE}"
    update_property_in_file ${prefix}.driver "${config_file}" "com.mysql.jdbc.Driver"
    # if you create a .url property then it takes precedence over the .host, .port, and .schema - so let user do that
}

# parameters:
# - configuration filename (absolute path)
# - property prefix for settings in the configuration file (java format is assumed, dot will be automatically appended to prefix)
mysql_userinput_connection_properties() {
    echo "Configuring MySQL Connection..."
    prompt_with_default MYSQL_HOSTNAME "Hostname:" ${DEFAULT_MYSQL_HOSTNAME}
    prompt_with_default MYSQL_PORTNUM "Port Num:" ${DEFAULT_MYSQL_PORTNUM}
    prompt_with_default MYSQL_DATABASE "Database:" ${DEFAULT_MYSQL_DATABASE}
    prompt_with_default MYSQL_USERNAME "Username:" ${DEFAULT_MYSQL_USERNAME}
    prompt_with_default_password MYSQL_PASSWORD "Password:" ${DEFAULT_MYSQL_PASSWORD}
}

mysql_clear() {
  MYSQL_HOME=""
  mysql=""
}

# Environment:
# - mysql_required_version (or provide it as a parameter)
mysql_version() {
  local min_version="${1:-${MYSQL_REQUIRED_VERSION:-${DEFAULT_MYSQL_REQUIRED_VERSION}}}"
  MYSQL_CLIENT_VERSION=""
  MYSQL_CLIENT_VERSION_OK=""
  if [ -n "$mysql" ]; then
    MYSQL_CLIENT_VERSION=`$mysql --version | sed -e 's/^.*Distrib \([0-9.]*\).*$/\1/g;'`
    if is_version_at_least "$MYSQL_CLIENT_VERSION" "${min_version}"; then
      MYSQL_CLIENT_VERSION_OK=yes
    else
      MYSQL_CLIENT_VERSION_OK=no
    fi
  fi
}

# Environment:
# - mysql_required_version
mysql_version_report() {
  mysql_version
  if [ "$MYSQL_CLIENT_VERSION_OK" == "yes" ]; then
    echo_success "Mysql client version $MYSQL_CLIENT_VERSION is ok"
  else
    echo_warning "Mysql client version $MYSQL_CLIENT_VERSION is not supported, minimum is ${MYSQL_REQUIRED_VERSION:-${DEFAULT_MYSQL_REQUIRED_VERSION}}"
  fi
}

# Environment:
# - mysql_required_version
mysql_detect() {
  local min_version="${1:-${MYSQL_REQUIRED_VERSION:-${DEFAULT_MYSQL_REQUIRED_VERSION}}}"
  if [[ -n "$MYSQL_HOME" && -n "$mysql" && -f "$mysql" ]]; then
    return
  fi
  mysql=`which mysql 2>/dev/null`
  if [ -e "$mysql" ]; then
    MYSQL_HOME=`dirname $mysql`
    echo "Found mysql client: $mysql"
    mysql_version ${min_version}
    if [ "$MYSQL_CLIENT_VERSION_OK" != "yes" ]; then
  MYSQL_HOME=''
  mysql=""
    fi
  fi
}


mysql_server_detect() {
  if [[ -n "$mysqld" && -f "$mysqld" ]]; then
    return 0
  fi
  if [[ -f /sbin/service && -f /etc/init.d/mysqld ]]; then
    mysqld="service mysqld"
    echo "Found mysql server: $mysqld"
    return 0
  fi
  if [[ -f /usr/bin/mysqld_safe ]]; then
    mysqld="/usr/bin/mysqld_safe"
    echo "Found mysql server: $mysqld"
    return 0
  fi
  mysqld=`which mysqld_safe 2>/dev/null`
  if [[ -f "$mysqld" ]]; then
    echo "Found mysql server: $mysqld"
    return 0
  fi
  return 1
}


# must load from config file or call mysql_detect prior to calling this function
mysql_env_report() {
  echo "mysql=$mysql"
}

# Environment:
# - mysql_required_version
mysql_require() {
  local min_version="${1:-${MYSQL_REQUIRED_VERSION:-${DEFAULT_MYSQL_REQUIRED_VERSION}}}"
  if [[ -z "$MYSQL_HOME" || -z "$mysql" || ! -f "$mysql" ]]; then
    mysql_detect ${min_version} > /dev/null
  fi
  if [[ -z "$MYSQL_HOME" || -z "$mysql" || ! -f "$mysql" ]]; then
    echo "Cannot find MySQL client version $min_version or later"
    exit 1
  fi
}



# Environment:
# - mysql_required_version
mysql_connection() {
  mysql_require
  mysql_connect="$mysql --batch --host=${MYSQL_HOSTNAME:-$DEFAULT_MYSQL_HOSTNAME} --port=${MYSQL_PORTNUM:-$DEFAULT_MYSQL_PORTNUM} --user=${MYSQL_USERNAME:-$DEFAULT_MYSQL_USERNAME} --password=${MYSQL_PASSWORD:-$DEFAULT_MYSQL_PASSWORD}"
}

# Environment:
# - mysql_required_version
# sets the is_mysql_available variable to "yes" or ""
# sets the is_MYSQL_DATABASE_created variable to "yes" or ""
mysql_test_connection() {
  mysql_connection
  is_mysql_available=""
  local mysql_test_result=`$mysql_connect -e "show databases" 2>/tmp/intel.mysql.err | grep "^${MYSQL_DATABASE}\$" | wc -l`
  if [ $mysql_test_result -gt 0 ]; then
    is_mysql_available="yes"
  fi
  mysql_connection_error=`cat /tmp/intel.mysql.err`
  rm -f /tmp/intel.mysql.err
}

# XXX TODO maybe replace with test_function_with_var
# Environment:
# - mysql_required_version
mysql_test_connection_report() {
  echo -n "Testing database connection... "
  mysql_test_connection
  if [ -n "$is_mysql_available" ]; then
    echo "OK"
  else
    echo "FAILED"
    echo_failure "${mysql_connection_error}"
  fi
}


# Environment:
# - mysql_required_version
# installs mysql client programs (not the server)
# we need the mysql client to create or patch the database, but
# the server can be installed anywhere
mysql_install() {
  MYSQL_CLIENT_YUM_PACKAGES="mysql"
  MYSQL_CLIENT_APT_PACKAGES="mysql-client"
  mysql_detect > /dev/null
  if [[ -z "$MYSQL_HOME" || -z "$mysql" ]]; then
    auto_install "MySQL client" "MYSQL_CLIENT" >> $INSTALL_LOG_FILE
    if [[ -z "$MYSQL_HOME" || -z "$mysql" ]]; then
      echo_failure "Unable to auto-install MySQL client" | tee -a $INSTALL_LOG_FILE
      echo "MySQL download URL:" >> $INSTALL_LOG_FILE
      echo "http://www.mysql.com/downloads/" >> $INSTALL_LOG_FILE
    fi
  else
    echo "MySQL client is already installed" >> $INSTALL_LOG_FILE
  fi
}

# Environment:
# - mysql_required_version
# installs mysql server 
mysql_server_install() {
  MYSQL_SERVER_YUM_PACKAGES="mysql-server"
  MYSQL_SERVER_APT_PACKAGES="mysql-server"
  mysql_server_detect >> $INSTALL_LOG_FILE
  if [[ -n "$mysqld" ]]; then
    echo "MySQL server is already installed" >> $INSTALL_LOG_FILE
    return;
  fi
  if [[ -z "$mysqld" ]]; then
    auto_install "MySQL server" "MYSQL_SERVER"   >> $INSTALL_LOG_FILE
    mysql_server_detect
  fi
  if [[ -z "$mysqld" ]]; then
    MYSQL_SERVER_YUM_PACKAGES=""
    MYSQL_SERVER_APT_PACKAGES="mysql-server-5.5"
    auto_install "MySQL server" "MYSQL_SERVER"  >> $INSTALL_LOG_FILE
    mysql_server_detect
  fi
  if [[ -z "$mysqld" ]]; then
    MYSQL_SERVER_YUM_PACKAGES=""
    MYSQL_SERVER_APT_PACKAGES="mysql-server-5.1"
    auto_install "MySQL server" "MYSQL_SERVER"  >> $INSTALL_LOG_FILE
    mysql_server_detect
  fi
  if [[ -z "$mysqld" ]]; then
    echo_failure "Unable to auto-install MySQL server" | tee -a $INSTALL_LOG_FILE
    echo "MySQL download URL:"  >> $INSTALL_LOG_FILE
    echo "http://www.mysql.com/downloads/" >> $INSTALL_LOG_FILE
  else #create the monitrc script
    mkdir -p /etc/monit/conf.d
    if [ ! -a /etc/monit/conf.d/mysql.mtwilson ]; then 
      echo "# mysql monitor
      check process mysql matching \"mysql\"
      group database
      start program = \"/usr/sbin/service mysql start\"
      stop program = \"/usr/sbin/service mysql stop\"
      if failed host 127.0.0.1 port 3306 then restart
      if 5 restarts within 5 cycles then timeout" > /etc/monit/conf.d/mysql.mtwilson
    fi
  fi
}
# responsible for ensuring that the connection properties in the config file
# Call this from the control script such as "asctl" before calling the other mysql_* functions
# Parameters:
# - absolute path to configuration file
# - prefix of mysql property file names (java style, dot is added automatically)
# Environment:
# - script_name such as 'asctl' or 'wlmctl'
# - intel_conf_dir (deprecated, just use absolute package_config_filename)
# - package_config_filename  (should be absolute)
mysql_configure_connection() {
    local config_file="${1:-/etc/intel/cloudsecurity/mysql.properties}"
    local prefix="${2:-mysql}"
    mysql_test_connection
    if [ -z "$is_mysql_available" ]; then
      mysql_read_connection_properties "${config_file}" "${prefix}"
      mysql_test_connection
    fi
    while [ -n "$mysql_connection_error" ]
    do
      echo_warning "Cannot connect to MySQL: $mysql_connection_error"
      prompt_yes_no MYSQL_RETRY_CONFIGURE_AFTER_FAILURE "Do you want to configure it now?"
      if [[ "no" == "$MYSQL_RETRY_CONFIGURE_AFTER_FAILURE" ]]; then
        echo "MySQL settings are in ${package_config_filename}"
        echo "Run '${script_name} setup' after configuring to continue."
        return 1
      fi
      mysql_userinput_connection_properties
      mysql_test_connection
    done
      echo_success "Connected to database \`${MYSQL_DATABASE}\` on ${MYSQL_HOSTNAME}"
#      local should_save
#      prompt_yes_no should_save "Save in ${package_config_filename}?"
#      if [[ "yes" == "${should_save}" ]]; then
        mysql_write_connection_properties "${config_file}" "${prefix}"
#      fi
}


# requires a mysql connection that can access the existing database, OR (if it doesn't exist)
# requires a mysql connection that can create databases and grant privileges
# call mysql_configure_connection before calling this function
mysql_create_database() {
  mysql_test_connection
  local create_sql="CREATE DATABASE \`${MYSQL_DATABASE}\`;"
  local grant_sql="GRANT ALL ON \`${MYSQL_DATABASE}\`.* TO \`${MYSQL_USERNAME}\` IDENTIFIED BY '${MYSQL_PASSWORD}';"
  if [ -z "$mysql_connection_error" ]; then
    if [ -n "$is_mysql_available" ]; then
      echo_success "Database \`${MYSQL_DATABASE}\` already exists"   >> $INSTALL_LOG_FILE
      return 0
    else
      echo "Creating database..."    >> $INSTALL_LOG_FILE
      $mysql_connect -e "${create_sql}"
      $mysql_connect -e "${grant_sql}"
      mysql_test_connection
      if [ -z "$is_mysql_available" ]; then
        echo_failure "Failed to create database."  | tee -a $INSTALL_LOG_FILE
        return 1
      fi
    fi
  else
    echo_failure "Cannot connect to database."  | tee -a $INSTALL_LOG_FILE
    echo "Try to execute the following commands on the database:"  >> $INSTALL_LOG_FILE
    echo "${create_sql}" >> $INSTALL_LOG_FILE
    echo "${grant_sql}"  >> $INSTALL_LOG_FILE
    return 1
  fi
}

# before using this function, you must first set the connection variables mysql_*
# example:  mysql_run_script /path/to/statements.sql
mysql_run_script() {
  local scriptfile="${1}"
  local datestr=`date +%Y-%m-%d.%H%M`
  echo "##### [${datestr}] Script file: ${scriptfile}" >> ${mysql_setup_log}
  $mysql_connect --force ${MYSQL_DATABASE} < "${scriptfile}" 2>> ${mysql_setup_log}
}

# requires a mysql connection that can create tables and procedures inside an existing database.
# depends on mysql_* variables for the connection information.
# call mysql_configure_connection before calling this function.
# Parameters: a list of sql files to execute (absolute paths)
mysql_install_scripts() {
  local scriptlist="$@"
  mysql_test_connection
  if [ -n "$is_mysql_available" ]; then
    echo "Connected to ${MYSQL_HOSTNAME} as ${MYSQL_USERNAME}. Executing script..."
    for scriptname in $scriptlist
    do
        mysql_run_script $scriptname
    done
    return 0
  else
    echo_failure "Cannot connect to database."
    return 1
  fi
}



mysql_running() {  
  MYSQL_SERVER_RUNNING=''
  if [ -n "$mysqld" ]; then
    local is_running=`$mysqld status | grep running`
    if [ -n "$is_running" ]; then
      MYSQL_SERVER_RUNNING=yes
    fi
  fi
}

mysql_running_report() {
  echo -n "Checking MySQL process... "
  mysql_running
  if [[ "$MYSQL_SERVER_RUNNING" == "yes" ]]; then
    echo "Running"
  else
    echo "Not running"
  fi
}
mysql_start() {
  if [ -n "$mysqld" ]; then
      $mysqld start
  fi
}
mysql_stop() {
  if [ -n "$mysqld" ]; then
      $mysqld stop
  fi
}

mysql_configure_ca() {
  export mysql_ssl_ca_dir="${1:-/etc/intel/cloudsecurity/mysql-ca}"
  # derive CA settings
  export mysql_ssl_ca_key="${mysql_ssl_ca_dir}/ca.key.pem"
  export mysql_ssl_ca_cert="${mysql_ssl_ca_dir}/ca.cert.pem"
  export mysql_ssl_ca_index="${mysql_ssl_ca_dir}/index"  
}

mysql_configure_ssl() {
  export mysql_ssl_dir="${1:-/etc/intel/cloudsecurity/mysql-ssl}"
}

# Parameters:
# - CA directory where private key, public key, and index is kept
mysql_create_ca() {
  mysql_configure_ca "${1:-$mysql_ssl_ca_dir}"
  # create CA
  if [ -f "${mysql_ssl_ca_key}" ]; then
    echo_warning "CA key already exists"
  else
    echo "Creating MySQL Certificate Authority..."
    mkdir -p "${mysql_ssl_ca_dir}"
    chmod 700 "${mysql_ssl_ca_dir}"
    touch "${mysql_ssl_ca_key}"
    chmod 600 "${mysql_ssl_ca_key}"
    openssl genrsa 2048 > "${mysql_ssl_ca_key}"
    openssl req -new -x509 -nodes -days 3650 -key "${mysql_ssl_ca_key}" -out "${mysql_ssl_ca_cert}" -subj "/CN=MySQL SSL CA/OU=Mt Wilson/O=Intel/C=US/"
    echo 0 > "${mysql_ssl_ca_index}"
  fi
}

# Parameters:
# - SSL request file (input)
# - SSL certificate file (output)
# - SSL CA dir
mysql_ca_sign() {
  local ssl_req="${1}"
  local ssl_cert="${2}"
  mysql_configure_ca "${3:-$mysql_ssl_ca_dir}"
  local prev_index next_index
  if [ -f "${mysql_ssl_ca_index}" ]; then
    prev_index=`cat "${mysql_ssl_ca_index}"`
    ((next_index=prev_index + 1))
  else
    echo_failure "Cannot find MySQL CA"
    return 1
  fi
  openssl x509 -req -in "${ssl_req}" -days 3650 -CA "${mysql_ssl_ca_cert}" -CAkey "${mysql_ssl_ca_key}"  -set_serial "${next_index}" -out "${ssl_cert}"
  echo "${next_index}" > "${mysql_ssl_ca_index}"
}

# Parameters:
# - SSL subject name (goes into the common name field in the certificate)
# - SSL directory where you keep server and client SSL keys and certificates
# - SSL CA directory
# Environment:
# you must have already created the CA key. the CA key information
# should be in the environment variables:
# MTWILSON_CA_KEY=/path/to/file
# MTWILSON_CA_CERT=/path/to/file
# MTWILSON_CA_PASSWORD=password
mysql_create_ssl() {
  local dname="${1}"
  mysql_configure_ssl "${2:-$mysql_ssl_dir}"
  mysql_configure_ca "${3:-$mysql_ssl_ca_dir}"
  echo "Creating MySQL SSL Certificate..."
  mkdir -p "${mysql_ssl_dir}"
  if [ -z "$dname" ]; then
    prompt_with_default MYSQL_SSL_CERT_CN "Common name (username):"
    dname=${MYSQL_SSL_CERT_CN}
  fi
  local filename=`echo "${dname}" | sed "s/[^a-zA-Z0-9-]/_/g"`
  local ssl_key="${mysql_ssl_dir}/${filename}.key.pem"
  local ssl_cert="${mysql_ssl_dir}/${filename}.cert.pem"
  openssl req -newkey rsa:1024 -days 3650 -nodes -keyout "${ssl_key}" -out "${ssl_cert}.req" -subj "/CN=${dname}/OU=Mt Wilson/O=Intel/C=US/"
  openssl rsa -in "${ssl_key}" -out "${ssl_key}"
  mysql_ca_sign "${ssl_cert}.req" "${ssl_cert}" "${mysql_ssl_ca_dir}"
  rm -rf "${ssl_cert}.req"
  # verify the certificate
  echo "Verifying SSL Certificate..."
  openssl verify -CAfile "${mysql_ssl_ca_cert}" "${ssl_cert}"
}


###  MYSQL COMMANSD

# Usage: mtwilson mysql-detect
mw_mysql_detect() {
        mysql_detect ${2:-${MYSQL_REQUIRED_VERSION:-${DEFAULT_MYSQL_REQUIRED_VERSION}}}
        mysql_env_report
}

#Usage: mtwilson-sslcert
mw_mysql_sslcert() {
        mysql_create_ca
        mysql_create_ssl "MySQL Server"
        mysql_create_ssl "Attestation Service"
        mysql_create_ssl "Management Service"
        mysql_create_ssl "Whitelist Service"
        mysql_create_ssl "Trust Dashboard"
}
