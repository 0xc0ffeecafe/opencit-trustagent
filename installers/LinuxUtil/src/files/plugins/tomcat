#!/bin/sh

DEFAULT_TOMCAT_REQUIRED_VERSION="6.0"

# XXX was originally called DEFAULT_TOMCAT_API_PORT
DEFAULT_TOMCAT_HTTPS_PORT="8443"
DEFAULT_TOMCAT_HTTP_PORT="8080"

#mw_tomcat() {
#addopt "s" "start"
#addopt "t" "stop"
#  echo "tomcat: hello world: $@"
#}


### FUNCTION LIBRARY: tomcat

# tomcat 

tomcat_clear() {
  TOMCAT_HOME=""
  tomcat_bin=""
  tomcat=""
}

## sets variable TOMCAT_VERSION and TOMCAT_VERSION_OK = yes  or  = no
#tomcat_version() {
#  TOMCAT_VERSION=""
#  TOMCAT_VERSION_OK=""
#  if [ -n "$tomcat" ]; then
#    TOMCAT_VERSION=`$tomcat version 2>&1 | grep -i "Server version:" | awk -F / '{ print $2 }'`
#    if is_version_at_least "$TOMCAT_VERSION" "${tomcat_required_version}"; then
#      TOMCAT_VERSION_OK=yes
#    else
#      TOMCAT_VERSION_OK=no
#    fi
#  fi
#}

#tomcat_version_report() {
#  tomcat_version
#  if [ "$TOMCAT_VERSION_OK" == "yes" ]; then
#    echo "Tomcat version $TOMCAT_VERSION is ok"
#  else
#    echo "Tomcat version $TOMCAT_VERSION is not supported, minimum is ${tomcat_required_version}"
#  fi
#}

# How to use;   GLASSFISH_VERSION   =`glassfish_version`
# If you pass a parameter, it is the path to a glassfish "asadmin" binary
# If you do not pass a parameter, the "glassfish" variable is used as the path to the binary
tomcat_version() {
  # Either the JAVA_HOME or the JRE_HOME environment variable must be defined
  # At least one of these environment variable is needed to run this program
  if [[ -z $JAVA_HOME && -z $JRE_HOME ]]; then java_detect; fi
  if [[ -z $JAVA_HOME && -z $JRE_HOME ]]; then return 1; fi

  if [[ -n "$tomcat" ]]; then
    # extract the version number from a string like: glassfish version "3.0"
    local current_tomcat_version=`$tomcat version 2>&1 | grep -i "^Server version:" | grep -i version | awk -F / '{ print $2 }'`
    if [ -n "$current_tomcat_version" ]; then
      echo "current_tomcat_version: $current_tomcat_version" >> $INSTALL_LOG_FILE
      export TOMCAT_VERSION=$current_tomcat_version
      return 0
    fi
    return 2
  fi
  return 1
}

# sample output from "$tomcat version":
#Using CATALINA_BASE:   /usr/share/apache-tomcat-6.0.29
#Using CATALINA_HOME:   /usr/share/apache-tomcat-6.0.29
#Using CATALINA_TMPDIR: /usr/share/apache-tomcat-6.0.29/temp
#Using JRE_HOME:        /usr/share/jdk1.6.0_29
#Using CLASSPATH:       /usr/share/apache-tomcat-6.0.29/bin/bootstrap.jar
#Server version: Apache Tomcat/6.0.29
#Server built:   July 19 2010 1458
#Server number:  6.0.0.29
#OS Name:        Linux
#OS Version:     3.0.0-12-server
#Architecture:   amd64
#JVM Version:    1.6.0_29-b11
#JVM Vendor:     Sun Microsystems Inc.


# Environment:
# - TOMCAT_REQUIRED_VERSION  (default is 6.0.29)
tomcat_version_report() {
  local min_version="${1:-${tomcat_required_version:-$DEFAULT_TOMCAT_REQUIRED_VERSION}}"
  #TOMCAT_VERSION=`tomcat_version`
  tomcat_version
  if is_version_at_least "$TOMCAT_VERSION" "${min_version}"; then
    echo_success "Tomcat version $TOMCAT_VERSION is ok"
    return 0
  else
    echo_warning "Tomcat version $TOMCAT_VERSION is not supported, minimum is ${min_version}"
    return 1
  fi
}

# detects possible tomcat installations
# does nothing if TOMCAT_HOME is already set; unset before calling to force detection
tomcat_detect() {
  local min_version="${1:-${TOMCAT_REQUIRED_VERSION:-${DEFAULT_TOMCAT_REQUIRED_VERSION}}}"
  echo "min_version for tomcat_detect is $min_version" >>  $INSTALL_LOG_FILE

  if [[ -z $JAVA_HOME && -z $JRE_HOME ]]; then java_detect; fi
  if [[ -z $JAVA_HOME && -z $JRE_HOME ]]; then return 1; fi

      if [[ -n "$java" ]]; then    
        local java_bindir=`dirname $java`
      fi

  # start with TOMCAT_HOME if it is already configured
  if [[ -n "$TOMCAT_HOME" ]]; then
    if [[ -z "$tomcat_bin" ]]; then
      tomcat_bin="$TOMCAT_HOME/bin/catalina.sh"
    fi
    if [[ -z "$tomcat" ]]; then
      if [[ -n "$java" ]]; then    
        # the glassfish admin tool read timeout is in milliseconds, so 900,000 is 900 seconds
        tomcat="env PATH=$java_bindir:$PATH $tomcat_bin"
      else
        tomcat="$tomcat_bin"
      fi
    fi
    if [[ -n "$tomcat" ]]; then
      #TOMCAT_VERSION=`tomcat_version`
      tomcat_version
      if is_version_at_least "$TOMCAT_VERSION" "${min_version}"; then
        return 0
      fi
    fi
  fi
#echo "tomcat variable is $tomcat"
#echo "TOMCAT_VERSION is $TOMCAT_VERSION"

  TOMCAT_CANDIDATES=`find / -name tomcat-users.xml 2>/dev/null`
  tomcat_clear
  echo "debug TOMCAT_CANDIDATES: ${TOMCAT_CANDIDATES}" >> $INSTALL_LOG_FILE
  for c in $TOMCAT_CANDIDATES
  do
    #echo "debug tomcat candidate: $c"
    if [ -z "$TOMCAT_HOME" ]; then
      local bin_dir=`dirname $c`
      local parent=`dirname $bin_dir`
      if [ -f "$parent/bin/catalina.sh" ]; then
        export TOMCAT_HOME="$parent"
        export TOMCAT_BASE="$parent"
        conf_dir=`find / -name tomcat-users.xml 2>/dev/null`
        export TOMCAT_CONF=`dirname $conf_dir`
        tomcat_bin=$parent/bin/catalina.sh
        tomcat="env PATH=$java_bindir:$PATH JAVA_HOME=$JAVA_HOME CATALINA_HOME=$TOMCAT_HOME CATALINA_BASE=$TOMCAT_BASE CATALINA_CONF=$TOMCAT_CONF $tomcat_bin"
        echo "Found Tomcat: $TOMCAT_HOME" >> $INSTALL_LOG_FILE
        echo "tomcat=$tomcat" >> $INSTALL_LOG_FILE
        tomcat_version
        if is_version_at_least "$TOMCAT_VERSION" "${min_version}"; then
          return 0
        fi
        tomcat_clear
      fi
    fi
  done

  return 1
}


tomcat_require() {
  local min_version="${1:-${tomcat_required_version:-$DEFAULT_TOMCAT_REQUIRED_VERSION}}"
  if not tomcat_ready; then
    tomcat_detect ${min_version} > /dev/null
  fi
  if not tomcat_ready; then
    echo_failure "Cannot find Tomcat server version $min_version or later"
    exit 1
  fi
}


tomcat_ready_report() {
  if [[ -z "$TOMCAT_HOME" ]]; then echo_warning "TOMCAT_HOME variable is not set"; return 1; fi
  if [[ -z "$tomcat_bin" ]]; then echo_warning "Tomcat binary path is not set"; return 1; fi
  if [[ ! -f "$tomcat_bin" ]]; then echo_warning "Cannot find Tomcat binary at $tomcat_bin"; return 1; fi
  if [[ -z "$tomcat" ]]; then echo_warning "Tomcat command is not set"; return 1; fi
  echo_success "Using Tomcat at $TOMCAT_HOME"
  return 0
}

tomcat_ready() {
  tomcat_ready_report > /dev/null
  return $?
}


tomcat_install() {
  tomcat_detect
  if [[ -z "$TOMCAT_HOME" || -z "$tomcat" ]]; then
    if [[ -n "$TOMCAT_PACKAGE" && -f "$TOMCAT_PACKAGE" ]]; then
      echo "Installing $TOMCAT_PACKAGE"
      #if [ -d "${tomcat_parent_dir}/${tomcat_name}" ]; then
      #    local datestr=`date +%Y-%m-%d.%H%M`
      #    echo "Renaming existing incomplete ${tomcat_parent_dir}/${tomcat_name} to ${tomcat_parent_dir}/${tomcat_name}.${datestr}"
      #    mv $tomcat_parent_dir/$tomcat_name $tomcat_parent_dir/${tomcat_name}.${datestr}
      #fi
      gunzip -c $TOMCAT_PACKAGE | tar xf - 2>&1  >/dev/null
      local tomcat_folder=`echo $TOMCAT_PACKAGE | awk -F .tgz '{ print $1 }'`
      mv $tomcat_folder /usr/share
      tomcat_detect
    else
      TOMCAT_YUM_PACKAGES="tomcat6"
      TOMCAT_APT_PACKAGES="tomcat6"
      auto_install "Tomcat via package manager" "TOMCAT"
      tomcat_detect
    fi
  fi
  
  if [[ -z "$TOMCAT_HOME" || -z "$tomcat" ]]; then
    echo "Unable to auto-install Tomcat"
    echo "  Tomcat download URL:"
    echo "  http://tomcat.apache.org/"
  fi

}

# Run this AFTER tomcat_install
# optional global variables:  
#   tomcat_username (default value tomcat)
#   TOMCAT_HOME (default value /usr/share/tomcat)
# works on Debian, Ubuntu, CentOS, RedHat, SUSE
# Username should not contain any spaces or punctuation
# Optional arguments:  one or more directories for tomcat user to own
tomcat_permissions() {
  local chown_locations="$@"
  local username=${TOMCAT_USERNAME:-tomcat}
  local user_exists=`cat /etc/passwd | grep "^${username}"`
  if [ -z "$user_exists" ]; then
    useradd -c "tomcat" -d "${TOMCAT_HOME:-/var}" -r -s /bin/bash "$username"
  fi
  local file
  for file in $chown_locations
  do
    if [[ -n "$file" && -e "$file" ]]; then
      chown -R "${username}:${username}" "$file"
    fi
  done
}


tomcat_running() {  
  TOMCAT_RUNNING=''
  if [ -n "$TOMCAT_HOME" ]; then
    TOMCAT_PID=`ps gauwxx | grep java | grep -v grep | grep "$TOMCAT_HOME" | awk '{ print $2 }'`
    echo TOMCAT_PID: $TOMCAT_PID >> $INSTALL_LOG_FILE
    if [ -n "$TOMCAT_PID" ]; then
      TOMCAT_RUNNING=yes
      echo TOMCAT_RUNNING: $TOMCAT_RUNNING >> $INSTALL_LOG_FILE
      return 0
    fi
  fi
  return 1
}

tomcat_running_report() {
  echo -n "Checking Tomcat process... "
  if tomcat_running; then
    echo "Running (pid $TOMCAT_PID)"
  else
    echo "Not running"
  fi
}
tomcat_start() {
  if [ -n "$tomcat" ]; then
      $tomcat start
  fi
}
tomcat_stop() {
  if [ -n "$tomcat" ]; then
      $tomcat stop
  fi
}
tomcat_restart() {
  if [ -n "$tomcat" ]; then
    if tomcat_running; then
      $tomcat stop
      sleep 5
    fi  
  
    $tomcat start
    sleep 5
  fi
}
tomcat_shutdown() {
  if tomcat_running; then
    if [ -n "$TOMCAT_PID" ]; then
        kill -9 $TOMCAT_PID
    fi
  fi
}
tomcat_start_report() {
  action_condition TOMCAT_RUNNING "Starting Tomcat" "tomcat_start > /dev/null; tomcat_running;"
}

tomcat_create_ssl_cert_prompt() {
    prompt_yes_no TOMCAT_CREATE_SSL_CERT "Do you want to set up an SSL certificate for Tomcat?"
    echo
    if [ "${TOMCAT_CREATE_SSL_CERT}" == "yes" ]; then
      if no_java ${JAVA_REQUIRED_VERSION:-1.6}; then echo "Cannot find Java ${JAVA_REQUIRED_VERSION:-1.6} or later"; return 1; fi
      tomcat_require
      prompt_with_default TOMCAT_SSL_CERT_CN "Domain name for SSL Certificate:" ${MTWILSON_SERVER:-127.0.0.1}
      tomcat_create_ssl_cert "${TOMCAT_SSL_CERT_CN}"
    fi
}

# TODO this functionality is moving to the java tool ; completely remove it from here
# Parameters:
# - serverName (hostname in the URL, such as 127.0.0.1, 192.168.1.100, my.attestation.com, etc.)
tomcat_create_ssl_cert() {
#  echo_warning "This feature has been disabled: tomcat_create_ssl_cert"
#  return
  if no_java ${JAVA_REQUIRED_VERSION:-1.6}; then echo "Cannot find Java ${JAVA_REQUIRED_VERSION:-1.6} or later"; return 1; fi
  tomcat_require
  

  local serverName="${1}"
  local keystorePassword=changeit
  local keystore=${TOMCAT_HOME}/ssl/.keystore
  local keytool=${JAVA_HOME}/bin/keytool
  local mtwilson=`which mtwilson 2>/dev/null`
  local has_cert
  if [ ! -f $keystore ]; then
    mkdir -p ${TOMCAT_HOME}/ssl
    $keytool -genkey -alias s1as -keyalg RSA  -keysize 2048 -keystore ${keystore} -storepass ${keystorePassword} -dname "CN=tomcat, OU=Mt Wilson, O=Intel, L=Folsom, ST=CA, C=US" -validity 3650  -keypass ${keystorePassword}  
  fi
  
  if [ -f $keystore ]; then
    # Check if there is already a certificate for this serverName in the Glassfish keystore
    has_cert=`$keytool -list -v -alias s1as -keystore $keystore -storepass $keystorePassword | grep "^Owner:" | grep "CN=${serverName}"`
  fi

  if [ -n "$has_cert" ]; then
    echo "SSL Certificate for ${serverName} already exists"
  else
    echo "Creating SSL Certificate for ${serverName}..."
    #$keytool -delete -alias s1as  -keystore $keystore -storepass $keystorePassword
    local tmpCN
    if valid_ip "${serverName}"; then 
     tmpCN="ip:${serverName}"
    else
     tmpCN="dns:${serverName}"
    fi
    $mtwilson api CreateSSLCertificate "${serverName}" "${tmpCN}" $keystore s1as "$keystorePassword"
    #$mtwilson api CreateSSLCertificate "${serverName}" "ip:${serverName}" $keystore s1as "$keystorePassword"
    $keytool -export -alias s1as -file "${TOMCAT_HOME}/ssl/ssl.${serverName}.crt" -keystore $keystore -storepass $keystorePassword 
    $keytool -import -trustcacerts -alias s1as -file ssl.${serverName}.crt -keystore $keytool -storepass ${keystorePassword}
    openssl x509 -in "${TOMCAT_HOME}/ssl/ssl.${serverName}.crt" -inform der -out "/etc/intel/cloudsecurity/ssl.crt.pem" -outform pem
    cp "${TOMCAT_HOME}/ssl/ssl.${serverName}.crt" /etc/intel/cloudsecurity/ssl.crt
    #sed -i.bak 's/sslProtocol=\"TLS\"/sslProtocol=\"TLS\" SSLCertificateFile=\"${catalina.base}\/ssl\/ssl.${serverName}.crt\" SSLCertificateKeyFile=\"${catalina.base}\/ssl\/ssl.${serverName}.crt.pem\"/g' ${TOMCAT_HOME}/conf/server.xml
    cp ${keystore} /root/
    #cp ${TOMCAT_HOME}/ssl/ssl.${serverName}.crt.pem /etc/intel/cloudsecurity/ssl.crt.pem
  fi
}
tomcat_env_report(){
  echo "TOMCAT_HOME=$TOMCAT_HOME"
  echo "tomcat_bin=$tomcat_bin"
  echo "tomcat=\"$tomcat\""
}

# Must call java_require before calling this.
# Parameters:
# - certificate alias to report on (default is s1as, the glassfish default ssl cert alias)
tomcat_sslcert_report() {
  local alias="${1:-s1as}"
  local keystorePassword=changeit
  local keystore=${TOMCAT_HOME}/ssl/.keystore
  java_keystore_cert_report "$keystore" "$keystorePassword" "$alias"
}

### TOMCAT COMMANDS

# Usage: mtwilson tomcat-detect
mw_tomcat_detect() {
        if no_java ${JAVA_REQUIRED_VERSION:-1.6}; then echo "Cannot find Java ${JAVA_REQUIRED_VERSION:-1.6} or later"; exit 1; fi
        tomcat_detect ${2:-$TOMCAT_REQUIRED_VERSION}
        tomcat_env_report
}

# Usage: mtwilson tomcat-start
mw_tomcat_start() {
        if no_java ${JAVA_REQUIRED_VERSION:-1.6}; then echo "Cannot find Java ${JAVA_REQUIRED_VERSION:-1.6} or later"; exit 1; fi
        tomcat_require
        tomcat_start_report
}

# Usage: mtwilson tomcat-stop
mw_tomcat_stop() {
        if no_java ${JAVA_REQUIRED_VERSION:-1.6}; then echo "Cannot find Java ${JAVA_REQUIRED_VERSION:-1.6} or later"; exit 1; fi
        tomcat_require
        tomcat_shutdown
}

# Usage: mtwilson tomcat-restart
mw_tomcat_restart() {
        if no_java ${JAVA_REQUIRED_VERSION:-1.6}; then echo "Cannot find Java ${JAVA_REQUIRED_VERSION:-1.6} or later"; exit 1; fi
        tomcat_require
        tomcat_restart
}

# Usage: mtwilson tomcat-status
mw_tomcat_status() {
        if no_java ${JAVA_REQUIRED_VERSION:-1.6}; then echo "Cannot find Java ${JAVA_REQUIRED_VERSION:-1.6} or later"; exit 1; fi
        tomcat_require
        tomcat_running_report
        tomcat_sslcert_report
}

# Usage: mtwilson tomcat-sslcert
mw_tomcat_sslcert() {
        #echo_warning "This feature has been disabled: mtwilson tomcat-sslcert"
        tomcat_create_ssl_cert_prompt
}

# Usage: mtwilson tomcat-enable-logging
#mw_tomcat_enable_logging() {
#        tomcat_enable_logging
#}
