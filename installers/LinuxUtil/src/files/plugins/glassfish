#!/bin/sh

DEFAULT_GLASSFISH_REQUIRED_VERSION="3.0"

# XXX was originally called DEFAULT_GLASSFISH_API_PORT
DEFAULT_GLASSFISH_HTTPS_PORT="8181"
DEFAULT_GLASSFISH_HTTP_PORT="8080"

#mw_glassfish() {
#addopt "s" "start"
#addopt "t" "stop"
#  echo "tomcat: hello world: $@"
#}



### FUNCTION LIBRARY: glassfish

glassfish_clear() {
  GLASSFISH_HOME=""
  glassfish_bin=""
  glassfish=""
}

glassfish_ready_report() {
  if [[ -z "$GLASSFISH_HOME" ]]; then echo_warning "GLASSFISH_HOME variable is not set"; return 1; fi
  if [[ -z "$glassfish_bin" ]]; then echo_warning "Glassfish binary path is not set"; return 1; fi
  if [[ ! -f "$glassfish_bin" ]]; then echo_warning "Cannot find Glassfish binary at $glassfish_bin"; return 1; fi
  if [[ -z "$glassfish" ]]; then echo_warning "Glassfish command is not set"; return 1; fi
  echo_success "Using Glassfish at $GLASSFISH_HOME"
  return 0
}


glassfish_ready() {
  glassfish_ready_report > /dev/null
  return $?
}

# How to use;   GLASSFISH_VERSION=`glassfish_version`
# If you pass a parameter, it is the path to a glassfish "asadmin" binary 
# If you do not pass a parameter, the "glassfish" variable is used as the path to the binary
glassfish_version() {

  if [[ -z $JAVA_HOME && -z $JRE_HOME ]]; then java_detect; fi
  if [[ -z $JAVA_HOME && -z $JRE_HOME ]]; then return 1; fi

  if [[ -n "$glassfish" ]]; then
    # extract the version number from a string like: glassfish version "3.0"
    local current_glassfish_version=`$glassfish version 2>&1 | grep -i glassfish | grep -i version | awk '{ print $8 }'`
    if [ -n "$current_glassfish_version" ]; then
      echo $current_glassfish_version
      return 0
    fi
    return 2
  fi
  return 1
}

# Environment:
# - glassfish_required_version
glassfish_version_report() {
  local min_version="${1:-${GLASSFISH_REQUIRED_VERSION:-$DEFAULT_GLASSFISH_REQUIRED_VERSION}}"
  GLASSFISH_VERSION=`glassfish_version`
  if is_version_at_least "$GLASSFISH_VERSION" "${min_version}"; then
    echo_success "Glassfish version $GLASSFISH_VERSION is ok"
    return 0
  else
    echo_warning "Glassfish version $GLASSFISH_VERSION is not supported, minimum is ${min_version}"
    return 1
  fi
}


# detects possible glassfish installations
# does nothing if GLASSFISH_HOME is already set; unset with glassfish_clear before calling to force detection
# Environment:
# - GLASSFISH_REQUIRED_VERSION (or provide it as a parameter)
# Parameters:
# - minimum required version
glassfish_detect() {
  local min_version="${1:-${GLASSFISH_REQUIRED_VERSION:-${DEFAULT_GLASSFISH_REQUIRED_VERSION}}}"

  if [[ -z $JAVA_HOME && -z $JRE_HOME ]]; then java_detect; fi
  if [[ -z $JAVA_HOME && -z $JRE_HOME ]]; then return 1; fi

      if [[ -n "$java" ]]; then    
        local java_bindir=`dirname $java`
      fi
  # start with GLASSFISH_HOME if it is already configured
  if [[ -n "$GLASSFISH_HOME" ]]; then
    if [[ -z "$glassfish_bin" ]]; then
      glassfish_bin="$GLASSFISH_HOME/bin/asadmin"
    fi
    if [[ -z "$glassfish" ]]; then
      if [[ -n "$java" ]]; then    
        # the glassfish admin tool read timeout is in milliseconds, so 900,000 is 900 seconds
        glassfish="env PATH=$java_bindir:$PATH AS_ADMIN_READTIMEOUT=900000 $glassfish_bin"
      else
        glassfish="env AS_ADMIN_READTIMEOUT=900000 $glassfish_bin"
      fi
    fi
    if [[ -n "$glassfish" ]]; then
      GLASSFISH_VERSION=`glassfish_version`
      if is_version_at_least "$GLASSFISH_VERSION" "${min_version}"; then
        return 0
      fi
    fi
  fi

  GLASSFISH_CANDIDATES=`find / -name domains 2>/dev/null | grep glassfish/domains`
#  echo "Candidates: $GLASSFISH_CANDIDATES"
  for c in $GLASSFISH_CANDIDATES
  do
      local parent=`dirname $c`
 #     echo "Checking Glassfish: $parent"
      if [ -f "$parent/bin/asadmin" ]; then
        GLASSFISH_HOME="$parent"
        glassfish_bin="$GLASSFISH_HOME/bin/asadmin"
        # the glassfish admin tool read timeout is in milliseconds, so 900,000 is 900 seconds
        glassfish="env PATH=$java_bindir:$PATH AS_ADMIN_READTIMEOUT=900000 $glassfish_bin"
        echo "Found Glassfish: $GLASSFISH_HOME"
#        echo "Found Glassfish: $glassfish"
        GLASSFISH_VERSION=`glassfish_version`
        if is_version_at_least "$GLASSFISH_VERSION" "${min_version}"; then
          return 0
        fi
      fi
  done
  echo_failure "Cannot find Glassfish"
  glassfish_clear
  return 1
  # read the admin username and pasword, if present. format of both files is shell  VARIABLE=VALUE
#  if [ -f /etc/glassfish/admin.user ]; then
#    export AS_ADMIN_USER=`read_property_from_file AS_ADMIN_USER /etc/glassfish/admin.user`
#  fi
#  if [ -f /etc/glassfish/admin.passwd ]; then
#    export AS_ADMIN_PASSWORDFILE=/etc/glassfish/admin.passwd
#  fi
}

# must load from config file or call glassfish_detect prior to calling this function
glassfish_env_report() {
  echo "GLASSFISH_HOME=$GLASSFISH_HOME"
  echo "glassfish_bin=$glassfish_bin"
  echo "glassfish=\"$glassfish\""
}


# Environment:
# - glassfish_required_version (or provide it as a parameter)
glassfish_require() {
  local min_version="${1:-${GLASSFISH_REQUIRED_VERSION:-${DEFAULT_GLASSFISH_REQUIRED_VERSION}}}"
  if not glassfish_ready; then
    glassfish_detect ${min_version} > /dev/null
  fi
  if not glassfish_ready; then
    echo_failure "Cannot find Glassfish server version $min_version or later"
    exit 1
  fi
}

# usage:  if no_glassfish 3.0; then echo_failure "Cannot find Glassfish"; exit 1; fi
no_glassfish() {
  if glassfish_require $1; then return 1; else return 0; fi
}

# Run this AFTER glassfish_install
# optional global variables:  
#   glassfish_username (default value glassfish)
#   GLASSFISH_HOME (default value /usr/share/glassfish3)
# works on Debian, Ubuntu, CentOS, RedHat, SUSE
# Username should not contain any spaces or punctuation
# Optional arguments:  one or more directories for glassfish user to own
glassfish_permissions() {
  local chown_locations="$@"
  local username=${glassfish_username:-glassfish}
  local user_exists=`cat /etc/passwd | grep "^${username}"`
  if [ -z "$user_exists" ]; then
    useradd -c "Glassfish" -d "${GLASSFISH_HOME:-/usr/share/glassfish3}" -r -s /bin/bash "$username"
  fi
  local file
  for file in $chown_locations
  do
    if [[ -n "$file" && -e "$file" ]]; then
      chown -R "${username}:${username}" "$file"
    fi
  done
}

# sets a system property for logback configuration file location
# requires a running glassfish
glassfish_logback() {
  # see if it's already set
  local prev_logback=`$glassfish list-system-properties 2>/dev/null | grep "logback.configurationFile"| head -n 1`
  # loop just in case there is more than one defined
#  while [ -n "${prev_logback}" ]
#  do
    echo "Deleting existing system property ${prev_logback}"
    $glassfish delete-system-property "${prev_logback}" 2>/dev/null >/dev/null
#    prev_logback=`$glassfish list-system-properties 2>/dev/null | grep "logback.configurationFile" | head -n 1`
#  done
  $glassfish create-system-properties logback.configurationFile=/etc/intel/cloudsecurity/logback.xml
}

# set the -Xmx and -XX:MaxPermSize memory parameters for the glassfish JVM
glassfish_memory() {
  local jvm_memory="${1:-2048}"
  local jvm_maxperm="${2:-512}"
  # glassfish must be started in order to do this
  
  # first we have to find the current options and remove them
  local prev_jvm_memory=`$glassfish list-jvm-options | grep "\-Xmx" | head -n 1`
  local prev_jvm_maxperm=`$glassfish list-jvm-options | grep "\-XX:MaxPermSize" | head -n 1`
  # loop just in case there is more than one defined
  while [ -n "${prev_jvm_memory}" ]
  do
    echo "Deleting existing option ${prev_jvm_memory}"
    $glassfish delete-jvm-options "${prev_jvm_memory}"
    prev_jvm_memory=`$glassfish list-jvm-options | grep "\-Xmx" | head -n 1`
  done
  # loop just in case there is more than one defined
  while [ -n "${prev_jvm_maxperm}" ]
  do
    # must escape the colon between XX and MaxPermSize
    prev_jvm_maxperm=`echo ${prev_jvm_maxperm} | sed -re "s/:/\\\\\\\\:/"`
    echo "Deleting existing option ${prev_jvm_maxperm}"
    $glassfish delete-jvm-options "${prev_jvm_maxperm}"
    prev_jvm_maxperm=`$glassfish list-jvm-options | grep "\-XX:MaxPermSize" | head -n 1`
  done
  $glassfish create-jvm-options "-Xmx${jvm_memory}m:-XX\\:MaxPermSize=${jvm_maxperm}m"
}

# reset glassfish overall logging handler to turn on logging
# this is required because glassfish 3.1.1 and later...
#  UI has a bug that causes the
# logging handler to be set to OFF whenever a user saves any change to
# other logging levels. 
# references:
# http://java.net/jira/browse/GLASSFISH-17037
# http://stackoverflow.com/questions/9373629/glassfish-3-1-1-suddenly-stopped-writing-to-server-log
glassfish_enable_logging() {
  $glassfish set-log-levels com.sun.enterprise.server.logging.GFFileHandler=ALL
}

# must restart glassfish for enable-secure-admin and memory options to take effect, so call these after calling this function:
#  glassfish_stop
#  glassfish_start
# (they are not done automatically in case the caller has other glassfish setup that would also require a restart)
# Environment:
# - glassfish_required_version
glassfish_install() {
  local GLASSFISH_PACKAGE="${1:-glassfish.zip}"
  GLASSFISH_YUM_PACKAGES="unzip"
  GLASSFISH_APT_PACKAGES="unzip"
  GLASSFISH_YAST_PACKAGES="unzip"
  GLASSFISH_ZYPPER_PACKAGES="unzip"
  glassfish_detect

  if glassfish_running; then glassfish_stop; fi

  if [[ -z "$GLASSFISH_HOME" || -z "$glassfish" ]]; then
    if [ -d /usr/share/glassfish3 ]; then
      # we do not remove it automatically in case there are applications or data in there that the user wants to save!!
      echo_warning "Glassfish not detected but /usr/share/glassfish3 exists"
      echo "Remove /usr/share/glassfish3 and try again"
      return 1
    fi
    if [[ -z "$GLASSFISH_PACKAGE" || ! -f "$GLASSFISH_PACKAGE" ]]; then
      echo_failure "Missing Glassfish installer: $GLASSFISH_PACKAGE"
      return 1
    fi
    auto_install "Glassfish requirements" "GLASSFISH"
    echo "Installing $GLASSFISH_PACKAGE"
    unzip $GLASSFISH_PACKAGE 2>&1  >/dev/null
    mv glassfish3 /usr/share/
    # Glassfish requires hostname to be mapped to 127.0.0.1 in /etc/hosts
    if [ -f "/etc/hosts" ]; then
        local hostname=`hostname`
        local found=`cat "/etc/hosts" | grep "^127.0.0.1" | grep "$hostname"`
        if [ -z "$found" ]; then
          local datestr=`date +%Y-%m-%d.%H%M`
          cp /etc/hosts /etc/hosts.${datestr}
          local updated=`sed -re "s/^(127.0.0.1\s.*)$/\1 ${hostname}/" /etc/hosts`
          echo "$updated" > /etc/hosts
        fi
    fi
    glassfish_detect
    if [[ -z "$GLASSFISH_HOME" || -z "$glassfish" ]]; then
      echo_failure "Unable to auto-install Glassfish"
      echo "Glassfish download URL:"
      echo "http://glassfish.java.net/"
      return 1
    fi
  else
    echo "Glassfish is already installed in $GLASSFISH_HOME"
  fi

  # TODO this functionality is moving to the java tool ; completely remove it from here
  if [ -n "${MTWILSON_SERVER}" ]; then
    glassfish_create_ssl_cert "${MTWILSON_SERVER}"
  else
    glassfish_create_ssl_cert_prompt
  fi

  glassfish_permissions "${GLASSFISH_HOME}"
  glassfish_start
  #glassfish_admin_user
  glassfish_memory 2048 512
  glassfish_logback
}

# glassfish must already be running to execute "enable-secure-domain",  so glassfish_start is required before calling this function
glassfish_admin_user() {  
  echo "You must choose an administrator username and password for Glassfish"
  echo "The Glassfish control panel is at https://${MTWILSON_SERVER:-127.0.0.1}:4848"
  prompt_with_default AS_ADMIN_USER "Glassfish admin username:"
  export AS_ADMIN_USER
  prompt_with_default_password AS_ADMIN_PASSWORD "Glassfish admin password:"

  export AS_ADMIN_PASSWORDFILE=/etc/glassfish/admin.passwd
  mkdir -p /etc/glassfish
  touch /etc/glassfish/admin.user /etc/glassfish/admin.passwd /etc/glassfish/admin.passwd.old
  chmod 600 /etc/glassfish/admin.user /etc/glassfish/admin.passwd /etc/glassfish/admin.passwd.old
  echo "AS_ADMIN_USER=${AS_ADMIN_USER}" > /etc/glassfish/admin.user
  echo "AS_ADMIN_PASSWORD=${AS_ADMIN_PASSWORD}" > /etc/glassfish/admin.passwd
  echo "AS_ADMIN_PASSWORD=" > /etc/glassfish/admin.passwd.old
  #echo "AS_ADMIN_MASTERPASSWORD=changeit" >> /etc/glassfish/admin.passwd

  echo "Glassfish will now ask you for the same information:"
  # $glassfish is an alias for full path of asadmin
  $glassfish --user=admin --passwordfile=/etc/glassfish/admin.passwd.old change-admin-password
  # XXX it asks for the password twice ...  can we script with our known value?
  $glassfish --user=admin --passwordfile=/etc/glassfish/admin.passwd enable-secure-admin
}


# pre-conditions:   GLASSFISH_HOME  must be set  (find it with glassfish_detect)
# returns success (0) if glassfish is running, error (1) if it is not running
# in order to prevent repetitive calls it also sets the GLASSFISH_RUNNING variable.
# if glassfish is running, it also sets the $GLASSFISH_PID variable to the process id.
# so you can write  if glassfish_running; echo "ok"; fi
# and after that also   if [ "$GLASSFISH_RUNNING" == "yes" ]; then echo "ok"; fi
glassfish_running() {  
  GLASSFISH_RUNNING=''
  if [ -n "$GLASSFISH_HOME" ]; then
    GLASSFISH_PID=`ps gauwxx | grep java | grep -v grep | grep "$GLASSFISH_HOME" | awk '{ print $2 }'`
    if [ -n "$GLASSFISH_PID" ]; then
      GLASSFISH_RUNNING=yes
      return 0
    fi
  fi
  return 1
}

glassfish_running_report() {
  echo -n "Checking Glassfish process... "
  if glassfish_running; then
    echo "Running (pid $GLASSFISH_PID)"
  else
    echo "Not running"
  fi
}
glassfish_start() {
  if [ -n "$glassfish" ]; then
      $glassfish start-domain
  fi
}
glassfish_stop() {
  if [ -n "$glassfish" ]; then
      $glassfish stop-domain
  fi
}
glassfish_restart() {
  if [ -n "$glassfish" ]; then
      $glassfish restart-domain
  fi
}
glassfish_shutdown() {
  glassfish_running
  if [ -n "$GLASSFISH_PID" ]; then
      kill -9 $GLASSFISH_PID
  fi
}
glassfish_start_report() {
  action_condition GLASSFISH_RUNNING "Starting Glassfish" "glassfish_start > /dev/null; glassfish_running;"
}

# Must call java_require before calling this.
# Parameters:
# - certificate alias to report on (default is s1as, the glassfish default ssl cert alias)
glassfish_sslcert_report() {
  local alias="${1:-s1as}"
  local keystorePassword=changeit
  local domain_found=`$glassfish list-domains | head -n 1 | awk '{ print $1 }'`
  local keystore=${GLASSFISH_HOME}/domains/${domain_found}/config/keystore.jks
  java_keystore_cert_report "$keystore" "$keystorePassword" "$alias"
}

# used by attestation_service_install to create a new domain just for attestation service
# parameters:  domain name, domain dir (absolute path)
# example: glassfish_create_domain "intel-as" "${ATTESTATION_SERVICE_HOME}/glassfish/domain"
# TODO ??? if attestation-service is configured to be deployed into a specific domain instead of
# the default domain, then we should define glassfish commands that abstract it so that
# the attestatioN_service_start/stop  don't need to really know that. 
# TODO !!! the create-domain command outputs the following lines which we need to capture so
# we can know the URL's for the new domain:
#
#Default port 4848 for Admin is in use. Using 39766
#Default port 8080 for HTTP Instance is in use. Using 41112
#Default port 7676 for JMS is in use. Using 52108
#Default port 3700 for IIOP is in use. Using 46322
#Default port 8181 for HTTP_SSL is in use. Using 42364
#
glassfish_create_domain() {
  local domain_name=${1}
  local domain_dir=${2}
  if [ -n "$glassfish" ]; then
    $glassfish create-domain --domaindir "${domain_dir}" "${domain_name}"
    $glassfish start-domain --domaindir "${domain_dir}" "${domain_name}"
  fi
}

# ??? see comment below about deleting the domain dir.  MAYBE the answer is
# to not provide a domain deletion command at all???? just create the domain if
# it does not exist and if it does install into it and we never delete the domain
# or its log files. OR, on uninstall we can delete the domain but just let the
# log files stay and sysadmin will have to clean that up if he wants to reinstall???
# or better to just undeploy the app on uninstall and leave the domain alone. 
glassfish_delete_domain() {
  local domain_name=${1}
  local domain_dir=${2}
  if [ -n "$glassfish" ]; then
    local domain_found=`$glassfish list-domains --domaindir "${domain_dir}" | grep "${domain_name}"`
    if [ -n "$domain_found" ]; then
      $glassfish delete-domain --domaindir "${domain_dir}" "${domain_name}"
      # TODO !!! after a domain is running there is a server.log file in the domain directory,
      # and the delete-domain command deletes everything except the log files... and if there is any
      # file still in the domain directory then a subsequent create-domain command will fail. so 
      # we need to delete the domain_dir/domain_name folder completely. but since this script will
      # probably be run as root, we want to be sure that we don't accidentally rm -rf /  or /opt etc.
      # SO, we need to check that domain_name is not blank and that domain_dir is not blank or just "/"...
      # but don't even try to do that manually because we'll miss something, like "/.././" 
      #rm -rf "${domain_dir}/${domain_name}"
    fi
  fi
}

glassfish_create_ssl_cert_prompt() {
    #echo_warning "This feature has been disabled: glassfish_create_ssl_cert_prompt"
    #return
    # SSL Certificate setup
    #local should_create_sslcert
    prompt_yes_no GLASSFISH_CREATE_SSL_CERT "Do you want to set up an SSL certificate for Glassfish?"
    echo
    if [ "${GLASSFISH_CREATE_SSL_CERT}" == "yes" ]; then
      if no_java ${JAVA_REQUIRED_VERSION:-1.6}; then echo "Cannot find Java ${JAVA_REQUIRED_VERSION:-1.6} or later"; return 1; fi
      glassfish_require
      prompt_with_default GLASSFISH_SSL_CERT_CN "Domain name for SSL Certificate:" ${MTWILSON_SERVER:-127.0.0.1}
      glassfish_create_ssl_cert "${GLASSFISH_SSL_CERT_CN}"
    fi
}

# TODO this functionality is moving to the java tool ; completely remove it from here
# Parameters:
# - serverName (hostname in the URL, such as 127.0.0.1, 192.168.1.100, my.attestation.com, etc.)
# XXX this function assumes we're using the first glassfish domain... usually "domain1"
glassfish_create_ssl_cert() {
#  echo_warning "This feature has been disabled: glassfish_create_ssl_cert"
#  return
  if no_java ${JAVA_REQUIRED_VERSION:-1.6}; then echo "Cannot find Java ${JAVA_REQUIRED_VERSION:-1.6} or later"; return 1; fi
  glassfish_require
  local serverName="${1}"
  local keystorePassword=changeit
  local domain_found=`$glassfish list-domains | head -n 1 | awk '{ print $1 }'`
  local keystore=${GLASSFISH_HOME}/domains/${domain_found}/config/keystore.jks
  local keytool=${JAVA_HOME}/bin/keytool
  local mtwilson=`which mtwilson 2>/dev/null`
  # does the keystore already have a cert with this alias? the alias has to be s1as (too much work to change it) so we check to see if a separate certificate file has been saved, indicating that s1as has already been replaced.
  #local ssl_found=`$keytool -list -keystore $keystore -storepass $keystorePassword | grep PrivateKeyEntry | awk -F ',' '{ print $1 }' | grep ${serverName}`
  #if [ -n "$ssl_found" ]; then
  #if [ -f "${GLASSFISH_HOME}/domains/${domain_found}/config/ssl.${serverName}.crt" ]; then
  #  echo "SSL Certificate for ${serverName} already exists"
  # Check if there is already a certificate for this serverName in the Glassfish keystore
  local has_cert=`$keytool -list -v -alias s1as -keystore $keystore -storepass $keystorePassword | grep "^Owner:" | grep "CN=${serverName}"`
  if [ -n "$has_cert" ]; then
    echo "SSL Certificate for ${serverName} already exists"
  else
    echo "Creating SSL Certificate for ${serverName}..."
    $keytool -delete -alias s1as  -keystore $keystore -storepass $keystorePassword
    # NIARL code in Trust Agent uses Bouncy Castle APIs which require a Subject Alternative Name in the Server's SSL certificate in order to validate a certificate with an IP address in the subject.
    # Java 7 supports -ext san=ip:1.2.3.4    to add the extension.  Java 6 does not.  So we use the mtwilson command to generate it. 
    #$keytool -genkey -alias s1as -keysize 2048 -keyalg RSA -dname "CN=${serverName}, OU=Mt Wilson, C=US" -keystore $keystore -storepass $keystorePassword -keypass $keystorePassword -validity 3650
    #$mtwilson api CreateSSLCertificate "CN=${serverName}, OU=Mt Wilson, C=US" "ip:${serverName}" $keystore s1as "$keystorePassword"
    local tmpCN
    if valid_ip "${serverName}"; then 
     tmpCN="ip:${serverName}"
    else
     tmpCN="dns:${serverName}"
    fi
    $mtwilson api CreateSSLCertificate "${serverName}" "${tmpCN}" $keystore s1as "$keystorePassword"
    $keytool -export -alias s1as -file "${GLASSFISH_HOME}/domains/${domain_found}/config/ssl.${serverName}.crt" -keystore $keystore -storepass $keystorePassword
    #openssl x509 -in "${GLASSFISH_HOME}/domains/${domain_found}/config/ssl.${serverName}.crt" -out /tmp/mycert.der -outform DER
    #openssl x509 -in /tmp/mycert.der -inform DER -out /etc/intel/cloudsecurity/ssl.crt.pem -outform PEM
    cp "${GLASSFISH_HOME}/domains/${domain_found}/config/ssl.${serverName}.crt" /etc/intel/cloudsecurity/ssl.crt
    echo "Restarting Glassfish domain..."
    glassfish_restart
  fi
}

### GLASSFISH COMMANDS

# Usage: mtwilson glassfish-detect
mw_glassfish_detect() {
        if no_java ${JAVA_REQUIRED_VERSION:-1.6}; then echo "Cannot find Java ${JAVA_REQUIRED_VERSION:-1.6} or later"; exit 1; fi
        glassfish_detect ${2:-$GLASSFISH_REQUIRED_VERSION}
        glassfish_env_report
}

# Usage: mtwilson glassfish-start
mw_glassfish_start() {
        if no_java ${JAVA_REQUIRED_VERSION:-1.6}; then echo "Cannot find Java ${JAVA_REQUIRED_VERSION:-1.6} or later"; exit 1; fi
        glassfish_require
        glassfish_start_report
}

# Usage: mtwilson glassfish-stop
mw_glassfish_stop() {
        if no_java ${JAVA_REQUIRED_VERSION:-1.6}; then echo "Cannot find Java ${JAVA_REQUIRED_VERSION:-1.6} or later"; exit 1; fi
        glassfish_require
        glassfish_shutdown
}

# Usage: mtwilson glassfish-restart
mw_glassfish_restart() {
        if no_java ${JAVA_REQUIRED_VERSION:-1.6}; then echo "Cannot find Java ${JAVA_REQUIRED_VERSION:-1.6} or later"; exit 1; fi
        glassfish_require
        glassfish_restart
}

# Usage: mtwilson glassfish-status
mw_glassfish_status() {
        if no_java ${JAVA_REQUIRED_VERSION:-1.6}; then echo "Cannot find Java ${JAVA_REQUIRED_VERSION:-1.6} or later"; exit 1; fi
        glassfish_require
        glassfish_running_report
        glassfish_sslcert_report
}

# Usage: mtwilson glassfish-sslcert
mw_glassfish_sslcert() {
        #echo_warning "This feature has been disabled: mtwilson glassfish-sslcert"
        glassfish_create_ssl_cert_prompt
}

# Usage: mtwilson glassfish-enable-logging
mw_glassfish_enable_logging() {
        glassfish_enable_logging
}
