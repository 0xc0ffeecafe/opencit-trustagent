#!/bin/sh

VERSION=1.3
BUILD=1000

mw_version() {
  echo "Mt Wilson"
  echo "Version 1.3"
  echo "Build ${BUILD}"
}

### FUNCTION LIBRARY: information functions

# Runs its argument and negates the error code: 
# If the argument exits with success (0) then this function exits with error (1).
# If the argument exits with error (1) then this function exits with success (0).
# Note: only works with arguments that are executable; any additional parameters will be passed.
# Example:  if not using_java; then echo "Warning: skipping Java"; fi 
no() { $* ; if [ $? -eq 0 ]; then return 1; else return 0; fi }
not() { $* ; if [ $? -eq 0 ]; then return 1; else return 0; fi }

# extracts the major version number (1) out of a string like 1.2.3_4
version_major() {
  echo "${1}" | awk -F . '{ print $1 }'
}
# extracts the minor version number (2) out of a string like 1.2.3_4
version_minor() {
  echo "${1}" | awk -F . '{ print $2 }'
}
# extracts the second minor version number (3) out of a string like 1.2.3_4
version_extract3() {
  local thirdpart=`echo "${1}" | awk -F . '{ print $3 }'`
  echo "${thirdpart}" | awk -F _ '{ print $1 }'
}
# extracts the fourth minor version number (4) out of a string like 1.2.3_4
version_extract4() {
  local thirdpart=`echo "${1}" | awk -F . '{ print $3 }'`
  echo "${thirdpart}" | awk -F _ '{ print $2 }'
}

# two arguments: actual version number (string), required version number (string)
# example:  `is_version_at_least 4.9 5.0` will return "no" because 4.9 < 5.0
is_version_at_least() {
  local testver="${1}"
  local reqver="${2}"
  local hasmajor=`version_major "${testver}"`
  local hasminor=`version_minor "${testver}"`
  local reqmajor=`version_major "${reqver}"`
  local reqminor=`version_minor "${reqver}"`
  if [[  -n "${reqmajor}" && "${hasmajor}" -gt "${reqmajor}" \
     || \
       -n "${reqmajor}" && "${hasmajor}" -eq "${reqmajor}" \
       && -z "${reqminor}" \
     || \
       -n "${reqmajor}" && "${hasmajor}" -eq "${reqmajor}" \
       && -n "${reqminor}" && "${hasminor}" -ge "${reqminor}" \
     ]]; then
#    echo "yes"
    return 0
  else
#    echo "no"
    return 1
  fi  
}

# like is_version_at_least but works on entire java version string 1.6.0_29
# instead of just a major.minor number
# This function is here and not in the java plugin because it's a generic version check
# function for version numbers that are in the same (Java) format. 
# Parameters:
# - version to test (of installed software)
# - minimum required version
# Return code:  0 (no errors) if the java version given is greater than or equal to the minimum version
is_java_version_at_least() {
  local testver="${1}"
  local reqver="${2}"
  local hasmajor=`version_major "${testver}"`
  local hasminor=`version_minor "${testver}"`
  local hasminor3=`version_extract3 "${testver}"`
  local hasminor4=`version_extract4 "${testver}"`
  local reqmajor=`version_major "${reqver}"`
  local reqminor=`version_minor "${reqver}"`
  local reqminor3=`version_extract3 "${reqver}"`
  local reqminor4=`version_extract4 "${reqver}"`
  if [[  -n "${reqmajor}" && "${hasmajor}" -gt "${reqmajor}" \
     || \
       -n "${reqmajor}" && "${hasmajor}" -eq "${reqmajor}" \
       && -z "${reqminor}" \
     || \
       -n "${reqmajor}" && "${hasmajor}" -eq "${reqmajor}" \
       && -n "${reqminor}" && "${hasminor}" -gt "${reqminor}" \
     || \
       -n "${reqmajor}" && "${hasmajor}" -eq "${reqmajor}" \
       && -n "${reqminor}"  && "${hasminor}"  -eq "${reqminor}" \
       && -n "${reqminor3}" && "${hasminor3}" -gt "${reqminor3}" \
     || \
       -n "${reqmajor}" && "${hasmajor}" -eq "${reqmajor}" \
       && -n "${reqminor}"  && "${hasminor}"  -eq "${reqminor}" \
       && -z "${reqminor3}" \
     || \
       -n "${reqmajor}" && "${hasmajor}" -eq "${reqmajor}" \
       && -n "${reqminor}"  && "${hasminor}"  -eq "${reqminor}" \
       && -n "${reqminor3}" && "${hasminor3}" -eq "${reqminor3}" \
       && -z "${reqminor4}" \
     || \
       -n "${reqmajor}" && "${hasmajor}" -eq "${reqmajor}" \
       && -n "${reqminor}"  && "${hasminor}"  -eq "${reqminor}" \
       && -n "${reqminor3}" && "${hasminor3}" -eq "${reqminor3}" \
       && -n "${reqminor4}" && "${hasminor4}" -ge "${reqminor4}"  \
     ]]; then
#    echo "yes"
    return 0
  else
#    echo "no"
    return 1
  fi  
}
