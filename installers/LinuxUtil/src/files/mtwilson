#!/bin/bash
# WARNING:
# *** do NOT use TABS for indentation, use SPACES
# *** TABS will cause errors in some linux distributions

# SCRIPT CONFIGURATION:
share_dir=/usr/local/share/mtwilson/util
apiclient_dir=/usr/local/share/mtwilson/apiclient
setupconsole_dir=/opt/intel/cloudsecurity/setup-console
apiclient_java=${apiclient_dir}/java
env_dir=/usr/local/share/mtwilson/env
conf_dir=/etc/intel/cloudsecurity
#apiclient_shell=${apiclient_dir}/shell
mysql_required_version=5.0
glassfish_required_version=3.0
java_required_version=1.6.0_29

# FUNCTION LIBRARY and VERSION INFORMATION
if [ -f ${share_dir}/functions ]; then  . ${share_dir}/functions; else echo "Missing file: ${share_dir}/functions";   exit 1; fi
if [ -f ${share_dir}/version ]; then  . ${share_dir}/version; else  echo_warning "Missing file: ${share_dir}/version"; fi
if [ ! -d ${env_dir} ]; then mkdir -p ${env_dir}; fi
shell_include_files ${env_dir}/*
if [ -f /root/mtwilson.env ]; then  . /root/mtwilson.env; fi
#if [ -f ${apiclient_dir}/functions ]; then  . ${apiclient_dir}/functions; else echo "Missing file: ${apiclient_dir}/functions";   exit 1; fi

# ensure we have some global settings available before we continue so the rest of the code doesn't have to provide a default
export DATABASE_VENDOR=${DATABASE_VENDOR:-mysql}
export WEBSERVER_VENDOR=${WEBSERVER_VENDOR:-glassfish}
if using_mysql; then
    export mysql_required_version=${MYSQL_REQUIRED_VERSION:-5.0}
elif using_postgres; then
    export postgres_required_version=${POSTGRES_REQUIRED_VERSION:-8.4}
fi
if using_glassfish; then
    export glassfish_required_version=${GLASSFISH_REQUIRED_VERSION:-3.0}
elif using_tomcat; then
    export tomcat_required_version=${TOMCAT_REQUIRED_VERSION:-8.4}
fi
export java_required_version=${JAVA_REQUIRED_VERSION:-1.6.0_29}

call_apiclient() {
  java_require
  APICLIENT_JARS=$(JARS=(${apiclient_java}/*.jar); IFS=:; echo "${JARS[*]}")
  mainclass=com.intel.mtwilson.client.TextConsole
  $java -cp "$APICLIENT_JARS" $mainclass $@
}

call_setupcommand() {
  java_require
  SETUP_CONSOLE_JARS=$(JARS=(${setupconsole_dir}/*.jar); IFS=:; echo "${JARS[*]}")
  mainclass=com.intel.mtwilson.setup.TextConsole
  $java -cp "$SETUP_CONSOLE_JARS" $mainclass $@
}

find_ctl_commands() {
  pcactl=`which pcactl 2>/dev/null`
  msctl=`which msctl 2>/dev/null`
  wlmctl=`which wlmctl 2>/dev/null`
  asctl=`which asctl 2>/dev/null`
  mcctl=`which mcctl 2>/dev/null`
  wpctl=`which wpctl 2>/dev/null`
  tdctl=`which tdctl 2>/dev/null`
}

mtwilson_saml_cert_report() {
  local keystore=`read_property_from_file saml.keystore.file ${conf_dir}/attestation-service.properties`
  local keystorePassword=`read_property_from_file saml.keystore.password ${conf_dir}/attestation-service.properties`
  local keyalias=`read_property_from_file saml.key.alias ${conf_dir}/attestation-service.properties`
  java_keystore_cert_report "${conf_dir}/$keystore" "$keystorePassword" "$keyalias"
}

erase_data_with_user_confirmation() {
  # WARNING: the following prompt value SHOULD NOT be scripted in an answer file
  echo_warning "You are about to delete the Mt Wilson database."
  prompt_yes_no CONFIRM_ERASE_DATA "Do you want to continue?"
  if [ "${CONFIRM_ERASE_DATA}" == "yes" ]; then
    mysql_read_connection_properties "${conf_dir}/attestation-service.properties" "mountwilson.as.db"
    mysql_test_connection
    if [ -n "$is_mysql_available" ]; then
      echo "Connected to ${MYSQL_HOSTNAME} as ${MYSQL_USERNAME}. Dropping database..."
      $mysql_connect --force -e "DROP DATABASE ${MYSQL_DATABASE}"
    else
      echo_failure "${mysql_connection_error}"
    fi
  fi
  
  CONFIRM_ERASE_DATA=

  echo_warning "You are about to delete the Mt Wilson user accounts."
  prompt_yes_no CONFIRM_ERASE_DATA "Do you want to continue?"
  if [ "${CONFIRM_ERASE_DATA}" == "yes" ]; then
   if [ -d /var/opt/intel/management-console/users ]; then
     for i in `ls -1 /var/opt/intel/management-console/users`; do
      usr=`echo $i | sed -e s/.jks//g`
      echo_warning "deleting $usr jks file"
      rm  /var/opt/intel/management-console/users/$i;
     done
     echo_warning "Mt Wilson user accounts deleted."
   else
     echo_warning "No Mt Wilson user accounts to delete."
   fi
  fi
}

setup() {
  java_detect; java_env_report > ${env_dir}/java
  glassfish_detect; glassfish_env_report > ${env_dir}/glassfish
  find_ctl_commands

  # Set the "setup" flag so that service setup commands to not attempt to re-deploy their application (in order to preserve any customized version of the app that has been deployed to glassfish directly)
  export MTWILSON_SETUP_NODEPLOY=1

  # Gather default configuration
  MTWILSON_SERVER_IP_ADDRESS=${MTWILSON_SERVER_IP_ADDRESS:-$(hostaddress)}
  MTWILSON_SERVER=${MTWILSON_SERVER:-$MTWILSON_SERVER_IP_ADDRESS}

  # Prompt for installation settings
  echo "Please enter the IP Address or Hostname that will identify the Mt Wilson server.
This address will be used in the server SSL certificate and in all Mt Wilson URLs,
such as https://${MTWILSON_SERVER:-127.0.0.1}.
Detected the following options on this server:"
  IFS=$'\n'; echo "$(hostaddress_list)"; IFS=' '; hostname;
  prompt_with_default MTWILSON_SERVER "Mt Wilson Server:"
  export MTWILSON_SERVER
  echo

  mysql_userinput_connection_properties
  export MYSQL_HOSTNAME MYSQL_PORTNUM MYSQL_DATABASE MYSQL_USERNAME MYSQL_PASSWORD

  # Attestation service auto-configuration
  export PRIVACYCA_SERVER=${MTWILSON_SERVER}

  # TODO should be completely removed because functions to create certificates are moving to the java tool
  # ## TODO: prompt for server settings (move from mtwilson-server installer setup.sh to here)
  # create glassfish ssl cert (TODO: move to a "glassfish" control script that should be created to make glassfish management easier... so instead of "mtwilson glassfish-stop" it would be just "glassfish stop"  etc)
  #if [ -n "${MTWILSON_SERVER}" ]; then
  #  glassfish_create_ssl_cert "${MTWILSON_SERVER}"
  #else
  #  glassfish_create_ssl_cert_prompt
  #fi
  # setup web services:
  if [ -n "$pcactl" ]; then $pcactl setup; $pcactl restart; fi
  if [ -n "$asctl" ]; then $asctl setup; fi
  if [ -n "$msctl" ]; then $msctl setup; fi
  if [ -n "$wlmctl" ]; then $wlmctl setup; fi
  if [ -n "$mcctl" ]; then $mcctl setup; fi
  if [ -n "$wpctl" ]; then $wpctl setup; fi
  if [ -n "$tdctl" ]; then $tdctl setup; fi

  # java setup tool - right now just checks database encryption, in the future it will take over some of the setup functions from the *ctl scripts which can be done in java
  shift
  call_setupcommand EncryptDatabase
}

all_status() {
  find_ctl_commands
  if [ -n "$pcactl" ]; then $pcactl status; fi
  if [ -n "$asctl" ]; then $asctl status; fi
  if [ -n "$msctl" ]; then $msctl status; fi
  if [ -n "$wlmctl" ]; then $wlmctl status; fi
  if [ -n "$mcctl" ]; then $mcctl status; fi
  if [ -n "$wpctl" ]; then $wpctl status; fi
  if [ -n "$tdctl" ]; then $tdctl status; fi
}


setup_env() {
  local datestr=`date +%Y-%m-%d.%H%M`
  echo "# environment on ${datestr}"
  java_detect > /dev/null
  echo "JAVA_HOME=$JAVA_HOME"
  echo "java_bindir=$java_bindir"
  echo "java=$java"
  if [[ "${DATABASE_VENDOR}" == "mysql" ]]; then
    mysql_detect > /dev/null
    echo "mysql=$mysql"
  fi
  if [[ "${WEBSERVER_VENDOR}" == "glassfish" ]]; then
    glassfish_detect > /dev/null
    echo "GLASSFISH_HOME=$GLASSFISH_HOME"
    echo "glassfish_bin=$glassfish_bin"
    echo "glassfish=\"$glassfish\""
  fi
}

RETVAL=0

# See how we were called.
case "$1" in
  version)
        echo "MtWilson Linux Utility"
	echo "Version ${VERSION}"
	echo "Build ${BUILD}"
        ;;
  setup-env)
        setup_env
        ;;
  glassfish-detect)
        java_require
        glassfish_detect ${2:-$glassfish_required_version}
        glassfish_env_report
        ;;
  glassfish-start)
        java_require; glassfish_require
        glassfish_start_report
        ;;
  glassfish-stop)
        java_require; glassfish_require
        glassfish_shutdown
        ;;
  glassfish-restart)
        java_require; glassfish_require
        glassfish_restart
        ;;
  glassfish-status)
        java_require; glassfish_require
        glassfish_running_report
        glassfish_sslcert_report
        ;;
  glassfish-sslcert)
        echo_warning "This feature has been disabled: mtwilson glassfish-sslcert"
        #glassfish_create_ssl_cert_prompt
        ;;
  glassfish-enable-logging)
        glassfish_enable_logging
        ;;
  mysql-detect)
        mysql_detect ${2:-$mysql_required_version}
        mysql_env_report
        ;;
  mysql-sslcert)
        mysql_create_ca
        mysql_create_ssl "MySQL Server"
        mysql_create_ssl "Attestation Service"
        mysql_create_ssl "Management Service"
        mysql_create_ssl "Whitelist Service"
        mysql_create_ssl "Trust Dashboard"
        ;;
  java-detect)
        java_detect ${2:-$java_required_version}
        java_env_report
        ;;
  api)
        shift
        call_apiclient $@
        ;;
  setup)
        if [ $# -gt 1 ]; then
          shift
          call_setupcommand $@
        else
          setup
        fi
        ;;
  fingerprint)
        # show server ssh fingerprint, glassfish ssl fingerprint, and saml cert fingerprint
        echo "== SSH HOST KEYS =="
        ssh_fingerprints
        java_require; glassfish_require
        echo "== GLASSFISH SSL CERTIFICATE =="
        glassfish_sslcert_report
        echo "== MT WILSON SAML CERTIFICATE =="
        mtwilson_saml_cert_report
        ;;
  status)
        all_status
        ;;
  erase-data)
        erase_data_with_user_confirmation
        ;;
  uninstall)
        java_require; glassfish_require
        echo "Stopping Glassfish..."
        glassfish_shutdown
        # application files
        echo "Removing Glassfish in /usr/share/glassfish3..."
        rm -rf /usr/share/glassfish3
        echo "Removing Mt Wilson applications in /opt/intel/cloudsecurity..."
        rm -rf /opt/intel/cloudsecurity
        echo "Removing Mt Wilson utilities in /usr/local/share/mtwilson..."
        rm -rf /usr/local/share/mtwilson
        # configuration files
        echo "Removing Mt Wilson configuration in /etc/intel/cloudsecurity..."
        rm -rf /etc/intel/cloudsecurity
        # data files
        echo "Removing Mt Wilson data in /var/opt/intel..."
        rm -rf /var/opt/intel
        # control scripts
        echo "Removing Mt Wilson control scripts..."
        echo asctl wlmctl msctl pcactl mcctl wpctl tdctl mtwilson | tr ' ' '\n' | xargs -I file rm -rf /usr/local/bin/file
		echo "Stopping Monit service..."
		service monit stop &> /dev/null
		if [ -f /etc/monit/monitrc ]; then
		 #remove monit config so when it starts back up it has nothing to monitor
		 # idealy here we should be uninstalling instead
		 rm -fr /etc/monit/monitrc
		fi
        # java:  rm -rf /usr/share/jdk1.6.0_29
        echo_success "Done"
        ;;
  help)
        echo "Usage: mtwilson {api|erase-data|fingerprint|glassfish-detect|glassfish-enable-logging|glassfish-start|glassfish-stop|" \
             "glassfish-restart|glassfish-status|glassfish-sslcert|help|mysql-decect|mysql-sslcert|java-detect|setup|status|uninstall|version}"
        ;;
  *)
        echo "Usage: mtwilson {api|erase-data|fingerprint|glassfish-detect|glassfish-enable-logging|glassfish-start|glassfish-stop|" \
             "glassfish-restart|glassfish-status|glassfish-sslcert|help|mysql-decect|mysql-sslcert|java-detect|setup|status|uninstall|version}"
        exit 1
esac

exit $RETVAL
