<?xml version="1.0" encoding="UTF-8"?>
<web-app version="3.0"
         xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">
<!--
    <filter>
        <filter-name>AuthorizationExceptionFilter</filter-name>
        <filter-class>com.intel.mtwilson.shiro.AuthorizationExceptionFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>ShiroExceptionHandler</filter-name>
        <url-pattern>/resources/*</url-pattern>
    </filter-mapping>
-->
<!--
    <listener>
        <description>Cleans up Persistence factory.</description>
        <listener-class>com.intel.mtwilson.as.helper.ASPersistenceManager</listener-class>
    </listener>
-->


    <!--
    Jersey reference: https://jersey.java.net/documentation/latest/deployment.html
    
    When using javax.ws.rs.core.Application as the servlet-name, the following
    resources are found by the automatic scan:
    
[INFO] Webapp directory = C:\Users\jbuhacof\workspace\dcg_security-mtwilson\integration\mtwilson-launcher-jersey2\src\main\webapp
2014-01-17 12:20:08.903:INFO:oejs.Server:main: jetty-9.1.0.RC2
Jan 17, 2014 12:20:44 PM org.glassfish.jersey.servlet.init.JerseyServletContainerInitializer addServletWithDefaultConfiguration
INFO: Registering the Jersey servlet application, named javax.ws.rs.core.Application, with the following root resource and provider classes: [class com.fasterxm
l.jackson.jaxrs.xml.JacksonJaxbXMLProvider, class com.fasterxml.jackson.jaxrs.base.JsonParseExceptionMapper, class com.fasterxml.jackson.jaxrs.xml.JsonParseExce
ptionMapper, class com.fasterxml.jackson.jaxrs.xml.JacksonXMLProvider, class org.glassfish.jersey.client.filter.HttpDigestAuthFilter, class com.intel.mtwilson.j
ersey.provider.JacksonXmlMapperProvider, class com.fasterxml.jackson.jaxrs.json.JacksonJaxbJsonProvider, class com.fasterxml.jackson.jaxrs.json.JsonMappingExcep
tionMapper, class com.fasterxml.jackson.jaxrs.base.JsonMappingExceptionMapper, class com.intel.mtwilson.util.LocalizedExceptionMapper, class com.intel.mtwilson.
jersey.provider.JacksonObjectMapperProvider, class com.intel.mtwilson.as.rest.v2.resource.Hosts, class com.fasterxml.jackson.jaxrs.xml.JsonMappingExceptionMappe
r, class org.glassfish.jersey.server.wadl.internal.WadlResource, class com.intel.mtwilson.as.rest.v2.resource.Files, class com.intel.mtwilson.jersey.provider.Ja
cksonYamlObjectMapperProvider, class com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider, class com.fasterxml.jackson.jaxrs.json.JsonParseExceptionMapper]

    And it works fine when doing "mvn jetty:start" on this project.  But when
    running the mtwilson-launcher-webapp project it complains that nothing is
    available to handle javax.ws.rs.core.Application as if the jersey2 servlet
    container is not present, even though it is.    
    
    -->
    
    <servlet>
        <!--
        <servlet-name>javax.ws.rs.core.Application</servlet-name>
        <servlet-class>org.glassfish.jersey.servlet.ServletContainer</servlet-class>
        -->
        <servlet-name>Jersey1</servlet-name>
        <servlet-class>org.glassfish.jersey.servlet.ServletContainer</servlet-class>
        <init-param>
            <param-name>javax.ws.rs.Application</param-name>
            <param-value>com.intel.mtwilson.jersey2.Jersey2Application1</param-value>
        </init-param>
        <!--
        <init-param>
            <param-name>javax.ws.rs.container.ContainerRequestFilter</param-name>
            <param-value>org.glassfish.jersey.server.filter.HttpMethodOverrideFilter,com.intel.mtwilson.as.helper.ASAuthenticationFilter,com.intel.mtwilson.audit.helper.AuditJerseyRequestFilter</param-value>
        </init-param>
        <init-param>
            <param-name>javax.ws.rs.container.ContainerResponseFilter</param-name>
            <param-value>com.intel.mtwilson.as.helper.ASLocalizationFilter,com.intel.mtwilson.audit.helper.AuditJerseyResponseFilter</param-value>
        </init-param>
        -->
        <!-- complete list of jersey 2.x properties: https://jersey.java.net/apidocs/latest/jersey/org/glassfish/jersey/server/ServerProperties.html -->
        <!-- XXX TODO plugin architecture needs a facility for configuring this... or just initialize it with all known codes and don't make it available to plugins -->
        <init-param>
            <param-name>jersey.config.server.languageMappings</param-name>
            <param-value>en:en, fr:fr</param-value>
        </init-param>
        <!--        
These are the two providers referenced below from the org.glassfish entries:        
org.glassfish.jersey.client.filter.HttpDigestAuthFilter
org.glassfish.jersey.server.wadl.internal.WadlResource
The com.intel.mtwilson entry includes our provider adapters and also our 
web resource classes.
The com.fasterxml.jackson.jaxrs entry includes the json and xml mappers.
        -->
        <!--
        <init-param>
            <param-name>jersey.config.server.provider.packages</param-name>
            <param-value>
                com.intel.mtwilson;com.fasterxml.jackson.jaxrs;org.glassfish.jersey.server;org.glassfish.jersey.client
            </param-value>        
        </init-param>
        -->
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <!--
        <servlet-name>javax.ws.rs.core.Application</servlet-name>
        -->
        <servlet-name>Jersey1</servlet-name>
        <url-pattern>/v1/*</url-pattern>
    </servlet-mapping>
    
    <servlet>
        <!--
        <servlet-name>javax.ws.rs.core.Application</servlet-name>
        <servlet-class>org.glassfish.jersey.servlet.ServletContainer</servlet-class>
        -->
        <servlet-name>Jersey2</servlet-name>
        <servlet-class>org.glassfish.jersey.servlet.ServletContainer</servlet-class>
        <init-param>
            <param-name>javax.ws.rs.Application</param-name>
            <param-value>com.intel.mtwilson.jersey2.Jersey2Application2</param-value>
        </init-param>
        <!--
        <init-param>
            <param-name>javax.ws.rs.container.ContainerRequestFilter</param-name>
            <param-value>org.glassfish.jersey.server.filter.HttpMethodOverrideFilter,com.intel.mtwilson.as.helper.ASAuthenticationFilter,com.intel.mtwilson.audit.helper.AuditJerseyRequestFilter</param-value>
        </init-param>
        <init-param>
            <param-name>javax.ws.rs.container.ContainerResponseFilter</param-name>
            <param-value>com.intel.mtwilson.as.helper.ASLocalizationFilter,com.intel.mtwilson.audit.helper.AuditJerseyResponseFilter</param-value>
        </init-param>
        -->
        <!-- complete list of jersey 2.x properties: https://jersey.java.net/apidocs/latest/jersey/org/glassfish/jersey/server/ServerProperties.html -->
        <!-- XXX TODO plugin architecture needs a facility for plugins to declare mappings relevant to their special resources; all mappings must be combined and then declared to jersey?  -->
        <init-param>
            <param-name>jersey.config.server.mediaTypeMappings</param-name>
            <param-value>txt:text/plain, xml:application/xml, json:application/json, jsonapi: application/vnd.api+json, html:text/html, saml:application/saml+xml, bin:application/octet-stream, yaml:text/yaml</param-value>
        </init-param>
        <!-- XXX TODO plugin architecture needs a facility for configuring this... or just initialize it with all known codes and don't make it available to plugins -->
        <init-param>
            <param-name>jersey.config.server.languageMappings</param-name>
            <param-value>en:en, fr:fr</param-value>
        </init-param>
        <!--        
These are the two providers referenced below from the org.glassfish entries:        
org.glassfish.jersey.client.filter.HttpDigestAuthFilter
org.glassfish.jersey.server.wadl.internal.WadlResource
The com.intel.mtwilson entry includes our provider adapters and also our 
web resource classes.
The com.fasterxml.jackson.jaxrs entry includes the json and xml mappers.
        -->
        <!--
        <init-param>
            <param-name>jersey.config.server.provider.packages</param-name>
            <param-value>
                com.intel.mtwilson;com.fasterxml.jackson.jaxrs;org.glassfish.jersey.server;org.glassfish.jersey.client
            </param-value>        
        </init-param>
        -->
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <!--
        <servlet-name>javax.ws.rs.core.Application</servlet-name>
        -->
        <servlet-name>Jersey2</servlet-name>
        <url-pattern>/v2/*</url-pattern>
    </servlet-mapping>
<!--
    <servlet>
        <servlet-name>ServletAdaptor</servlet-name>
        <servlet-class>com.sun.jersey.spi.container.servlet.ServletContainer</servlet-class>
        <init-param>
            <param-name>com.sun.jersey.spi.container.ContainerRequestFilters</param-name>
            <param-value>com.sun.jersey.api.container.filter.PostReplaceFilter,com.intel.mtwilson.as.helper.ASAuthenticationFilter,com.intel.mtwilson.audit.helper.AuditJerseyRequestFilter</param-value>
        </init-param>
        <init-param>
            <param-name>com.sun.jersey.spi.container.ContainerResponseFilters</param-name>
            <param-value>com.intel.mtwilson.as.helper.ASLocalizationFilter,com.intel.mtwilson.audit.helper.AuditJerseyResponseFilter</param-value>
        </init-param>
        <init-param>
            <param-name>com.sun.jersey.spi.container.ResourceFilters</param-name>
            <param-value>com.intel.mtwilson.security.jersey.RolesAllowedResourceFilterFactory</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>ServletAdaptor</servlet-name>
        <url-pattern>/resources/*</url-pattern>
    </servlet-mapping>
    <session-config>
        <session-timeout>
            30
        </session-timeout>
    </session-config>
    <welcome-file-list>
        <welcome-file>index.jsp</welcome-file>
    </welcome-file-list>
-->
    <!--
    <listener>
        <description>Configuration management</description>
        <listener-class>com.intel.mtwilson.as.helper.ASConfiguration</listener-class>
    </listener>
    -->
    <!--
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>/WEB-INF/applicationContext.xml</param-value>
    </context-param>

    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
-->
</web-app>
